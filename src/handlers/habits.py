import random
import sys
from datetime import date, datetime
from datetime import time as dt_time
from pathlib import Path

from aiogram import F, Router
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import CallbackQuery, Message
from aiogram.utils.keyboard import InlineKeyboardBuilder
from sqlalchemy import select

sys.path.insert(0, str(Path(__file__).parent.parent))

from config import logger
from db import HabitCompletion, Habits, SessionLocal, User

router = Router()

# –°–ø–∏—Å–æ–∫ —ç–º–æ–¥–∑–∏ –¥–ª—è –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–æ–¥–∫—Ä–µ–ø–ª–µ–Ω–∏—è
COMPLETION_EMOJIS = ["üî•", "üí™", "‚ö°", "‚ú®", "üåü", "üéØ", "üëè", "üöÄ"]


# FSM States –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–≤—ã—á–∫–∏
class AddHabitStates(StatesGroup):
    title = State()
    content_choice = State()  # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä–æ –∫–æ–Ω—Ç–µ–Ω—Ç (–¥–ª—è –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –ø—Ä–∏–≤—ã—á–µ–∫)
    # –î–ª—è —è–∑—ã–∫–æ–≤—ã—Ö –ø—Ä–∏–≤—ã—á–µ–∫ (language_reading, language_grammar)
    language_token_input = State()  # –í–≤–æ–¥ API —Ç–æ–∫–µ–Ω–∞, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    language_book_selection = State()  # –í—ã–±–æ—Ä –∫–Ω–∏–≥–∏ –∏–∑ —Å–ø–∏—Å–∫–∞
    schedule_type = State()
    weekdays = State()  # –¢–æ–ª—å–∫–æ –¥–ª—è weekly
    time = State()
    confirmation = State()


# FSM States –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∏–≤—ã—á–∫–∏
class EditHabitStates(StatesGroup):
    edit_title = State()
    edit_schedule = State()
    edit_weekdays = State()
    edit_time = State()


@router.message(Command("listhabits"))
async def cmd_listhabits(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ /listhabits - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø—Ä–∏–≤—ã—á–µ–∫ —Å –∫–Ω–æ–ø–∫–∞–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è."""
    user_id = message.from_user.id

    async with SessionLocal() as session:
        result = await session.execute(
            select(Habits).where(Habits.user_id == user_id).order_by(Habits.created_at)
        )
        habits = result.scalars().all()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—É—Å—Ç–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    if not habits:
        builder = InlineKeyboardBuilder()
        builder.button(text="–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É", callback_data="add_habit_start")
        builder.adjust(1)

        await message.answer(
            '–£ —Ç–µ–±—è –µ—â—ë –Ω–µ—Ç –ø—Ä–∏–≤—ã—á–µ–∫. –ù–∞—á–Ω–∏ —Å –º–∞–ª–µ–Ω—å–∫–æ–π, –Ω–∞–ø—Ä–∏–º–µ—Ä: "–ß—Ç–µ–Ω–∏–µ 10–º".',
            reply_markup=builder.as_markup(),
        )
        logger.info(f"User {user_id} viewed /listhabits - empty list")
        return

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å –∫–Ω–æ–ø–∫–∞–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    habits_text = "–¢–≤–æ–∏ –ø—Ä–∏–≤—ã—á–∫–∏:\n\n"
    builder = InlineKeyboardBuilder()

    for i, habit in enumerate(habits, start=1):
        status = "‚úÖ" if habit.active else "‚è∏"
        time_str = habit.time_of_day.strftime("%H:%M") if habit.time_of_day else "‚Äî"
        habits_text += f"{i}. {status} <b>{habit.title}</b> ‚Äî {habit.schedule_type}, {time_str}\n"

        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –ø—Ä–∏–≤—ã—á–∫–∏
        builder.button(text=f"‚úèÔ∏è {i}", callback_data=f"H_EDIT:{habit.id}")

    # –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π –ø—Ä–∏–≤—ã—á–∫–∏
    builder.button(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â—ë", callback_data="add_habit_start")

    # Adjust: –ø–æ 4 –∫–Ω–æ–ø–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —Ä—è–¥, –∑–∞—Ç–µ–º –∫–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
    rows = []
    for i in range(0, len(habits), 4):
        rows.append(min(4, len(habits) - i))
    rows.append(1)  # –ö–Ω–æ–ø–∫–∞ "–î–æ–±–∞–≤–∏—Ç—å –µ—â—ë"
    builder.adjust(*rows)

    await message.answer(habits_text, reply_markup=builder.as_markup())
    logger.info(f"User {user_id} viewed /listhabits - {len(habits)} habits")


@router.message(Command("addhabit"))
async def cmd_addhabit(message: Message, state: FSMContext):
    """–ö–æ–º–∞–Ω–¥–∞ /addhabit - –Ω–∞—á–∏–Ω–∞–µ—Ç –º–∞—Å—Ç–µ—Ä —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–≤—ã—á–∫–∏."""
    await state.clear()
    await message.answer(
        "–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏? (–∫—Ä–∞—Ç–∫–æ)\n\n" "–ù–∞–ø—Ä–∏–º–µ—Ä: <i>–ß—Ç–µ–Ω–∏–µ 10–º</i>, <i>–ó–∞—Ä—è–¥–∫–∞</i>, <i>–ú–µ–¥–∏—Ç–∞—Ü–∏—è</i>"
    )
    await state.set_state(AddHabitStates.title)
    await state.update_data(user_id=message.from_user.id)
    logger.info(f"User {message.from_user.id} started /addhabit wizard")


@router.callback_query(F.data == "add_habit_start")
async def start_add_habit_from_callback(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –º–∞—Å—Ç–µ—Ä —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–≤—ã—á–∫–∏ –∏–∑ –∫–Ω–æ–ø–∫–∏."""
    await state.clear()
    await callback.message.edit_text(
        "–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏? (–∫—Ä–∞—Ç–∫–æ)\n\n" "–ù–∞–ø—Ä–∏–º–µ—Ä: <i>–ß—Ç–µ–Ω–∏–µ 10–º</i>, <i>–ó–∞—Ä—è–¥–∫–∞</i>, <i>–ú–µ–¥–∏—Ç–∞—Ü–∏—è</i>"
    )
    await state.set_state(AddHabitStates.title)
    await state.update_data(user_id=callback.from_user.id)
    await callback.answer()
    logger.info(f"User {callback.from_user.id} started /addhabit wizard from button")


@router.message(StateFilter(AddHabitStates.title))
async def process_habit_title(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–∏–≤—ã—á–∫–∏."""
    title = message.text.strip()

    MAX_TITLE_LENGTH = 50
    if len(title) > MAX_TITLE_LENGTH:
        await message.answer(f"–ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (>{MAX_TITLE_LENGTH}). –ü–æ–ø—Ä–æ–±—É–π –∫–æ—Ä–æ—á–µ.")
        return

    await state.update_data(title=title)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —à–∞–±–ª–æ–Ω –¥–ª—è —ç—Ç–æ–π –ø—Ä–∏–≤—ã—á–∫–∏
    from llm_service import find_habit_template

    template = await find_habit_template(title)

    if template and template.has_content:
        # –ù–∞—à–ª–∏ —à–∞–±–ª–æ–Ω - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ state
        await state.update_data(template_id=template.id, template_name=template.name)

        # –î–ª—è —è–∑—ã–∫–æ–≤—ã—Ö –ø—Ä–∏–≤—ã—á–µ–∫ - —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω
        if template.category in ("language_reading", "language_grammar"):
            from db import UserLanguageSettings

            user_id = message.from_user.id

            async with SessionLocal() as session:
                result = await session.execute(
                    select(UserLanguageSettings).where(UserLanguageSettings.user_id == user_id)
                )
                settings = result.scalar_one_or_none()

                if not settings or not settings.api_token:
                    # –¢–æ–∫–µ–Ω–∞ –Ω–µ—Ç - –ø—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏
                    await message.answer(
                        f"üìö <b>{title}</b>\n\n"
                        "–î–ª—è —ç—Ç–æ–π –ø—Ä–∏–≤—ã—á–∫–∏ –Ω—É–∂–µ–Ω API —Ç–æ–∫–µ–Ω –æ—Ç Language Learning —Å–µ—Ä–≤–∏—Å–∞.\n\n"
                        "–í–≤–µ–¥–∏ —Å–≤–æ–π API —Ç–æ–∫–µ–Ω:"
                    )
                    await state.set_state(AddHabitStates.language_token_input)
                    return

                # –¢–æ–∫–µ–Ω –µ—Å—Ç—å
                await state.update_data(language_api_token=settings.api_token)

                # –î–ª—è –≥—Ä–∞–º–º–∞—Ç–∏–∫–∏ –ù–ï –Ω—É–∂–Ω–∞ –∫–Ω–∏–≥–∞ - —Å—Ä–∞–∑—É –∫ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é
                if template.category == "language_grammar":
                    await state.update_data(include_content=True)
                    await ask_habit_schedule(message, title, state)
                    return

                # –î–ª—è —á—Ç–µ–Ω–∏—è - –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –∫–Ω–∏–≥–∏
                await ask_language_book_selection(message, state, settings.api_token)
                return

        # –û–±—ã—á–Ω—ã–π flow - —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä–æ –∫–æ–Ω—Ç–µ–Ω—Ç
        builder = InlineKeyboardBuilder()
        builder.button(text="–î–∞, –ø—Ä–∏—Å—ã–ª–∞–π –∑–∞–¥–∞–Ω–∏—è", callback_data="content_yes")
        builder.button(text="–ù–µ—Ç, —Ç–æ–ª—å–∫–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ", callback_data="content_no")
        builder.adjust(1)

        # –ü—Ä–∏–º–µ—Ä—ã –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        example_content = {
            "fitness": "–ù–∞–ø—Ä–∏–º–µ—Ä: '10 –ø—Ä–∏—Å–µ–¥–∞–Ω–∏–π, 5 –æ—Ç–∂–∏–º–∞–Ω–∏–π, 1 –±–µ—Ä–ø–∏'",
            "reading": "–ù–∞–ø—Ä–∏–º–µ—Ä: '–ü—Ä–æ—á–∏—Ç–∞–π 10 —Å—Ç—Ä–∞–Ω–∏—Ü'",
            "meditation": "–ù–∞–ø—Ä–∏–º–µ—Ä: '5 –º–∏–Ω—É—Ç –º–µ–¥–∏—Ç–∞—Ü–∏–∏ —Å —Ñ–æ–∫—É—Å–æ–º –Ω–∞ –¥—ã—Ö–∞–Ω–∏–∏'",
            "health": "–ù–∞–ø—Ä–∏–º–µ—Ä: '–í—ã–ø–µ–π 2 —Å—Ç–∞–∫–∞–Ω–∞ –≤–æ–¥—ã'",
            "language_reading": "–§—Ä–∞–≥–º–µ–Ω—Ç—ã –∫–Ω–∏–≥–∏ –∏–∑ Language API",
            "language_grammar": "–£—Ä–æ–∫–∏ –≥—Ä–∞–º–º–∞—Ç–∏–∫–∏ –∏–∑ Language API",
        }.get(template.category, "–ù–∞–ø—Ä–∏–º–µ—Ä: –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ –¥–ª—è —ç—Ç–æ–π –ø—Ä–∏–≤—ã—á–∫–∏")

        await message.answer(
            f"–û—Ç–ª–∏—á–Ω–æ! –ü—Ä–∏–≤—ã—á–∫–∞: <b>{title}</b>\n\n"
            f"–Ø –∑–Ω–∞—é —ç—Ç—É –ø—Ä–∏–≤—ã—á–∫—É! –•–æ—á–µ—à—å, —á—Ç–æ–±—ã —è –ø—Ä–∏—Å—ã–ª–∞–ª —Ç–µ–±–µ –∑–∞–¥–∞–Ω–∏—è –≤–º–µ—Å—Ç–µ —Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º?\n\n"
            f"{example_content}",
            reply_markup=builder.as_markup(),
        )
        await state.set_state(AddHabitStates.content_choice)
    else:
        # –®–∞–±–ª–æ–Ω–∞ –Ω–µ—Ç - –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é
        await state.update_data(template_id=None, include_content=False)
        await ask_habit_schedule(message, title, state)


@router.message(StateFilter(AddHabitStates.language_token_input))
async def handle_language_token_input(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ API —Ç–æ–∫–µ–Ω–∞ –¥–ª—è Language Learning."""
    from api.language_api import LanguageAPI
    from db import UserLanguageSettings

    user_id = message.from_user.id
    token = message.text.strip()

    if not token or len(token) < 10:
        await message.answer("–¢–æ–∫–µ–Ω —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑:")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω - –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–Ω–∏–≥
    try:
        api = LanguageAPI(user_token=token)
        books = await api.get_books()
        await api.close()

        if not books:
            await message.answer("–¢–æ–∫–µ–Ω –≤–∞–ª–∏–¥–Ω—ã–π, –Ω–æ –∫–Ω–∏–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.\n\n" "–í–≤–µ–¥–∏ –¥—Ä—É–≥–æ–π —Ç–æ–∫–µ–Ω:")
            return

    except Exception as e:
        logger.error(f"Failed to validate Language API token: {e}")
        await message.answer(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–æ–∫–µ–Ω. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π.\n\n"
            "–ü—Ä–æ–≤–µ—Ä—å —Ç–æ–∫–µ–Ω –∏ –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑:"
        )
        return

    # –¢–æ–∫–µ–Ω –≤–∞–ª–∏–¥–Ω—ã–π - —Å–æ—Ö—Ä–∞–Ω—è–µ–º
    async with SessionLocal() as session:
        result = await session.execute(
            select(UserLanguageSettings).where(UserLanguageSettings.user_id == user_id)
        )
        settings = result.scalar_one_or_none()

        if settings:
            settings.api_token = token
        else:
            settings = UserLanguageSettings(user_id=user_id, api_token=token)
            session.add(settings)

        await session.commit()

    await state.update_data(language_api_token=token)
    await message.answer("‚úÖ –¢–æ–∫–µ–Ω —Å–æ—Ö—Ä–∞–Ω—ë–Ω!")

    # –ü–æ–ª—É—á–∞–µ–º template –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    data = await state.get_data()
    template_id = data.get("template_id")

    if template_id:
        from db import HabitTemplate

        async with SessionLocal() as session:
            template = await session.get(HabitTemplate, template_id)

            # –î–ª—è –≥—Ä–∞–º–º–∞—Ç–∏–∫–∏ –ù–ï –Ω—É–∂–Ω–∞ –∫–Ω–∏–≥–∞ - —Å—Ä–∞–∑—É –∫ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é
            if template and template.category == "language_grammar":
                await state.update_data(include_content=True)
                title = data.get("title", "–ü—Ä–∏–≤—ã—á–∫–∞")
                await ask_habit_schedule(message, title, state)
                return

    # –î–ª—è —á—Ç–µ–Ω–∏—è - –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –∫–Ω–∏–≥–∏
    await ask_language_book_selection(message, state, token)


@router.callback_query(StateFilter(AddHabitStates.language_book_selection), F.data.startswith("lang_book:"))
async def handle_language_book_selection(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∫–Ω–∏–≥–∏ –¥–ª—è —è–∑—ã–∫–æ–≤–æ–π –ø—Ä–∏–≤—ã—á–∫–∏."""
    from api.language_api import LanguageAPI

    # –ò–∑–≤–ª–µ–∫–∞–µ–º book_id –∏–∑ callback_data
    book_id = int(callback.data.split(":")[1])

    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ state
    data = await state.get_data()
    api_token = data.get("language_api_token")

    if not api_token:
        await callback.answer("–û—à–∏–±–∫–∞: —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–Ω–∏–≥–µ
    try:
        api = LanguageAPI(user_token=api_token)
        books = await api.get_books()
        await api.close()

        # –ù–∞—Ö–æ–¥–∏–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–Ω–∏–≥—É
        selected_book = next((b for b in books if b.get("id") == book_id), None)

        if not selected_book:
            await callback.answer("–ö–Ω–∏–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return

        book_title = selected_book.get("title", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–Ω–∏–≥–∞")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ state
        await state.update_data(language_book_id=book_id, language_book_title=book_title)

        await callback.message.edit_text(f"‚úÖ –í—ã–±—Ä–∞–Ω–∞ –∫–Ω–∏–≥–∞: <b>{book_title}</b>")
        await callback.answer()

        # –î–ª—è —è–∑—ã–∫–æ–≤—ã—Ö –ø—Ä–∏–≤—ã—á–µ–∫ –∫–æ–Ω—Ç–µ–Ω—Ç –≤—Å–µ–≥–¥–∞ –≤–∫–ª—é—á–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –≤–æ–ø—Ä–æ—Å –ø—Ä–æ –∫–æ–Ω—Ç–µ–Ω—Ç
        await state.update_data(include_content=True)

        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é
        title = data.get("title", "–ü—Ä–∏–≤—ã—á–∫–∞")
        await ask_habit_schedule(callback.message, title, state)

    except Exception as e:
        logger.error(f"Failed to get book info: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–Ω–∏–≥–µ", show_alert=True)


async def ask_language_book_selection(message: Message, state: FSMContext, api_token: str):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–Ω–∏–≥ –¥–ª—è –≤—ã–±–æ—Ä–∞."""
    from api.language_api import LanguageAPI

    try:
        api = LanguageAPI(user_token=api_token)
        books = await api.get_books()
        await api.close()

        if not books:
            await message.answer(
                "‚ùå –ö–Ω–∏–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.\n\n" "–ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É API."
            )
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é –±–µ–∑ –∫–Ω–∏–≥–∏ (—Å–æ–∑–¥–∞—Å—Ç—Å—è –ø—Ä–∏–≤—ã—á–∫–∞ –±–µ–∑ language_habit_id)
            data = await state.get_data()
            title = data.get("title", "–ü—Ä–∏–≤—ã—á–∫–∞")
            await ask_habit_schedule(message, title, state)
            return

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10 –∫–Ω–∏–≥
        builder = InlineKeyboardBuilder()
        for book in books[:10]:
            book_id = book.get("id")
            book_title = book.get("title", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
            # –û–±—Ä–µ–∑–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–æ 40 —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –∫–Ω–æ–ø–∫–∏
            button_text = book_title if len(book_title) <= 40 else book_title[:37] + "..."
            builder.button(text=button_text, callback_data=f"lang_book:{book_id}")

        builder.adjust(1)

        books_count = len(books)
        data = await state.get_data()
        title = data.get("title", "–ü—Ä–∏–≤—ã—á–∫–∞")

        await message.answer(
            f"üìö <b>{title}</b>\n\n" f"–ù–∞–π–¥–µ–Ω–æ –∫–Ω–∏–≥: {books_count}\n" f"–í—ã–±–µ—Ä–∏ –∫–Ω–∏–≥—É –¥–ª—è —ç—Ç–æ–π –ø—Ä–∏–≤—ã—á–∫–∏:",
            reply_markup=builder.as_markup(),
        )
        await state.set_state(AddHabitStates.language_book_selection)

    except Exception as e:
        logger.error(f"Failed to get books from Language API: {e}")
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ –∫–Ω–∏–≥.\n\n" "–ü—Ä–æ–≤–µ—Ä—å, —á—Ç–æ Language API —Ä–∞–±–æ—Ç–∞–µ—Ç –∏ —Ç–æ–∫–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π."
        )
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é –±–µ–∑ –∫–Ω–∏–≥–∏
        data = await state.get_data()
        title = data.get("title", "–ü—Ä–∏–≤—ã—á–∫–∞")
        await ask_habit_schedule(message, title, state)


async def ask_habit_schedule(message: Message, title: str, state: FSMContext):
    """–°–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Ç–∏–ø —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø—Ä–∏–≤—ã—á–∫–∏."""
    builder = InlineKeyboardBuilder()
    builder.button(text="–ï–∂–µ–¥–Ω–µ–≤–Ω–æ", callback_data="schedule_daily")
    builder.button(text="–ü–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏", callback_data="schedule_weekly")
    builder.adjust(1)

    await message.answer(
        f"–û—Ç–ª–∏—á–Ω–æ! –ü—Ä–∏–≤—ã—á–∫–∞: <b>{title}</b>\n\n–í—ã–±–µ—Ä–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ:", reply_markup=builder.as_markup()
    )
    await state.set_state(AddHabitStates.schedule_type)


@router.callback_query(StateFilter(AddHabitStates.content_choice), F.data.in_(["content_yes", "content_no"]))
async def process_content_choice(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: –ø—Ä–∏—Å—ã–ª–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç –∏–ª–∏ –Ω–µ—Ç."""
    include_content = callback.data == "content_yes"
    await state.update_data(include_content=include_content)

    data = await state.get_data()
    title = data["title"]

    if include_content:
        await callback.message.edit_text("–°—É–ø–µ—Ä! –ë—É–¥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å –∑–∞–¥–∞–Ω–∏—è —Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏ ‚úÖ")
    else:
        await callback.message.edit_text("–•–æ—Ä–æ—à–æ, —Ç–æ–ª—å–∫–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è ‚úÖ")

    await ask_habit_schedule(callback.message, title, state)
    await callback.answer()


@router.callback_query(StateFilter(AddHabitStates.schedule_type), F.data.startswith("schedule_"))
async def process_schedule_type(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è."""
    schedule_type = callback.data.split("schedule_")[1]
    await state.update_data(schedule_type=schedule_type)

    if schedule_type == "daily":
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤—ã–±–æ—Ä –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏ –¥–ª—è daily
        await callback.message.edit_text("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ: <b>–ï–∂–µ–¥–Ω–µ–≤–Ω–æ</b> ‚úÖ")
        await ask_habit_time(callback.message, state)
    elif schedule_type == "weekly":
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏
        builder = InlineKeyboardBuilder()
        weekdays = ["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–í—Å"]
        for i, day in enumerate(weekdays, start=0):
            builder.button(text=day, callback_data=f"wd_{i}")
        builder.button(text="‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="weekdays_confirm")
        builder.adjust(7, 1)  # 7 –¥–Ω–µ–π –≤ —Ä—è–¥, –ø–æ—Ç–æ–º –∫–Ω–æ–ø–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è

        await callback.message.edit_text(
            "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ: <b>–ü–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏</b>\n\n"
            "–í—ã–±–µ—Ä–∏ –¥–Ω–∏ (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ), –∑–∞—Ç–µ–º –Ω–∞–∂–º–∏ <b>–ì–æ—Ç–æ–≤–æ</b>:",
            reply_markup=builder.as_markup(),
        )
        await state.set_state(AddHabitStates.weekdays)
        await state.update_data(selected_weekdays=[])

    await callback.answer()


@router.callback_query(StateFilter(AddHabitStates.weekdays), F.data.startswith("wd_"))
async def toggle_weekday(callback: CallbackQuery, state: FSMContext):
    """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –≤—ã–±–æ—Ä –¥–Ω—è –Ω–µ–¥–µ–ª–∏."""
    weekday_index = int(callback.data.split("_")[1])
    data = await state.get_data()
    selected = data.get("selected_weekdays", [])

    if weekday_index in selected:
        selected.remove(weekday_index)
    else:
        selected.append(weekday_index)

    await state.update_data(selected_weekdays=selected)

    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ—Ç–º–µ—Ç–∫–∞–º–∏
    builder = InlineKeyboardBuilder()
    weekdays = ["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–í—Å"]
    for i, day in enumerate(weekdays):
        mark = "‚úÖ" if i in selected else ""
        builder.button(text=f"{mark} {day}", callback_data=f"wd_{i}")
    builder.button(text="‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="weekdays_confirm")
    builder.adjust(7, 1)

    await callback.message.edit_reply_markup(reply_markup=builder.as_markup())
    await callback.answer()


@router.callback_query(StateFilter(AddHabitStates.weekdays), F.data == "weekdays_confirm")
async def confirm_weekdays(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –≤—ã–±–æ—Ä –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏."""
    data = await state.get_data()
    selected = data.get("selected_weekdays", [])

    if not selected:
        await callback.answer("–í—ã–±–µ—Ä–∏ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –¥–µ–Ω—å", show_alert=True)
        return

    weekdays_names = ["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–í—Å"]
    selected_names = ", ".join([weekdays_names[i] for i in sorted(selected)])

    await callback.message.edit_text(f"–î–Ω–∏: <b>{selected_names}</b> ‚úÖ")
    await ask_habit_time(callback.message, state)
    await callback.answer()


async def ask_habit_time(message: Message, state: FSMContext):
    """–°–ø—Ä–∞—à–∏–≤–∞–µ—Ç –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –ø—Ä–∏–≤—ã—á–∫–µ."""
    common_times = ["06:00", "07:00", "08:00", "12:00", "18:00", "20:00", "21:00"]

    builder = InlineKeyboardBuilder()
    for t in common_times:
        builder.button(text=t, callback_data=f"time_{t}")
    builder.button(text="–í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é ‚å®Ô∏è", callback_data="time_custom")
    builder.adjust(4)

    await message.answer("–í–æ —Å–∫–æ–ª—å–∫–æ –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å? (—Ñ–æ—Ä–º–∞—Ç HH:MM)", reply_markup=builder.as_markup())
    await state.set_state(AddHabitStates.time)


@router.callback_query(StateFilter(AddHabitStates.time), F.data.startswith("time_"))
async def process_habit_time(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–∏–≤—ã—á–∫–∏."""
    time_data = callback.data.split("time_")[1]

    if time_data == "custom":
        await callback.message.edit_text(
            "–í–≤–µ–¥–∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ <b>HH:MM</b>\n\n" "–ù–∞–ø—Ä–∏–º–µ—Ä: <code>07:30</code>"
        )
        await state.update_data(time_custom=True)
        await callback.answer()
        return

    # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è
    from .start import validate_time_format

    is_valid, parsed_time = validate_time_format(time_data)

    if is_valid:
        await state.update_data(habit_time=parsed_time, time_custom=False)
        await callback.message.edit_text(f"–í—Ä–µ–º—è: <b>{time_data}</b> ‚úÖ")
        await show_habit_confirmation(callback.message, state)
    else:
        await callback.answer("–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏", show_alert=True)

    await callback.answer()


@router.message(StateFilter(AddHabitStates.time))
async def process_habit_time_custom(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏."""
    data = await state.get_data()
    if not data.get("time_custom"):
        return

    from .start import validate_time_format

    is_valid, parsed_time = validate_time_format(message.text)

    if not is_valid:
        await message.answer(
            f"–•–º, –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–ª –≤—Ä–µ–º—è ¬´{message.text}¬ª.\n\n"
            "–§–æ—Ä–º–∞—Ç: <b>HH:MM</b>, –ø—Ä–∏–º–µ—Ä: <code>07:30</code>\n\n"
            "–ü–æ–ø—Ä–æ–±—É–µ—à—å –µ—â—ë?"
        )
        return

    await state.update_data(habit_time=parsed_time, time_custom=False)
    await message.answer(f"–í—Ä–µ–º—è: <b>{parsed_time.strftime('%H:%M')}</b> ‚úÖ")
    await show_habit_confirmation(message, state)


async def show_habit_confirmation(message: Message, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–≤—ã—á–∫–∏."""
    data = await state.get_data()

    title = data["title"]
    schedule_type = data["schedule_type"]
    habit_time = data["habit_time"]

    schedule_human = "–ï–∂–µ–¥–Ω–µ–≤–Ω–æ"
    if schedule_type == "weekly":
        weekdays_names = ["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–í—Å"]
        selected = data.get("selected_weekdays", [])
        selected_names = ", ".join([weekdays_names[i] for i in sorted(selected)])
        schedule_human = selected_names

    time_str = habit_time.strftime("%H:%M")

    builder = InlineKeyboardBuilder()
    builder.button(text="‚úÖ –°–æ–∑–¥–∞—Ç—å", callback_data="habit_confirm_create")
    builder.button(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="habit_confirm_cancel")
    builder.adjust(1)

    await message.answer(
        f"–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ:\n\n" f"üìå <b>{title}</b>\n" f"üìÖ {schedule_human}\n" f"üïê {time_str}\n\n" "–°–æ–∑–¥–∞—ë–º?",
        reply_markup=builder.as_markup(),
    )
    await state.set_state(AddHabitStates.confirmation)


@router.callback_query(StateFilter(AddHabitStates.confirmation), F.data == "habit_confirm_create")
async def create_habit(callback: CallbackQuery, state: FSMContext, scheduler=None):
    """–°–æ–∑–¥–∞—ë—Ç –ø—Ä–∏–≤—ã—á–∫—É –≤ –ë–î."""
    data = await state.get_data()

    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    title = data["title"]
    schedule_type = data["schedule_type"]
    habit_time = data["habit_time"]
    user_id = data["user_id"]

    # –§–æ—Ä–º–∏—Ä—É–µ–º RRULE –¥–ª—è weekly
    rrule = None
    if schedule_type == "weekly":
        weekdays = data.get("selected_weekdays", [])
        days_map = ["MO", "TU", "WE", "TH", "FR", "SA", "SU"]
        byday = ",".join([days_map[i] for i in sorted(weekdays)])
        rrule = f"FREQ=WEEKLY;BYDAY={byday}"

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —à–∞–±–ª–æ–Ω–µ –∏ –∫–æ–Ω—Ç–µ–Ω—Ç–µ
    template_id = data.get("template_id")
    include_content = data.get("include_content", False)

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —è–∑—ã–∫–æ–≤—ã—Ö –ø—Ä–∏–≤—ã—á–µ–∫
    language_book_id = data.get("language_book_id")
    language_book_title = data.get("language_book_title")

    # –°–æ–∑–¥–∞—ë–º –ø—Ä–∏–≤—ã—á–∫—É
    async with SessionLocal() as session:
        language_habit_id = None

        # –ï—Å–ª–∏ —ç—Ç–æ —è–∑—ã–∫–æ–≤–∞—è –ø—Ä–∏–≤—ã—á–∫–∞ - —Å–æ–∑–¥–∞—ë–º LanguageHabit
        if template_id:
            from db import HabitTemplate, LanguageHabit

            template = await session.get(HabitTemplate, template_id)

            if template and template.category in ("language_reading", "language_grammar"):
                # –°–æ–∑–¥–∞—ë–º LanguageHabit
                # –î–ª—è reading –Ω—É–∂–µ–Ω book_id, –¥–ª—è grammar - –ù–ï –Ω—É–∂–µ–Ω
                language_habit = LanguageHabit(
                    user_id=user_id,
                    habit_type="reading" if template.category == "language_reading" else "grammar",
                    name=title,
                    current_book_id=language_book_id,  # –î–ª—è grammar –±—É–¥–µ—Ç None
                    current_book_title=language_book_title,  # –î–ª—è grammar –±—É–¥–µ—Ç None
                    is_active=True,
                    daily_goal=1000,  # –î–µ—Ñ–æ–ª—Ç–Ω–∞—è —Ü–µ–ª—å - 1000 —Å–ª–æ–≤
                )
                session.add(language_habit)
                await session.flush()  # –ü–æ–ª—É—á–∞–µ–º ID –¥–æ commit
                language_habit_id = language_habit.id

                if template.category == "language_reading":
                    logger.info(
                        f"Created LanguageHabit {language_habit_id} for user {user_id}: "
                        f"{title} (book_id={language_book_id})"
                    )
                else:
                    logger.info(
                        f"Created LanguageHabit {language_habit_id} for user {user_id}: " f"{title} (grammar)"
                    )

        # –°–æ–∑–¥–∞—ë–º Habit
        habit = Habits(
            user_id=user_id,
            title=title,
            schedule_type=schedule_type,
            rrule=rrule if schedule_type == "weekly" else None,
            time_of_day=habit_time,
            active=True,
            template_id=template_id,
            include_content=include_content,
            language_habit_id=language_habit_id,  # –°–≤—è–∑—ã–≤–∞–µ–º —Å LanguageHabit
        )
        session.add(habit)
        await session.commit()
        await session.refresh(habit)

        habit_id = habit.id

    # –ü–ª–∞–Ω–∏—Ä—É–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ
    try:
        if scheduler:
            await scheduler.schedule_user_reminders(user_id)
            logger.info(f"User {user_id} created habit {habit_id}, reminders scheduled immediately")
        else:
            logger.warning(f"Scheduler not found in workflow_data for user {user_id}")
    except Exception as e:
        logger.error(f"Failed to schedule reminders for user {user_id}: {e}")

    # –°–æ–∑–¥–∞—ë–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
    builder = InlineKeyboardBuilder()
    builder.button(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â—ë –ø—Ä–∏–≤—ã—á–∫—É", callback_data="add_habit_start")
    builder.button(text="üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")
    builder.adjust(1)

    await callback.message.edit_text(
        f"–°–æ–∑–¥–∞–ª –ø—Ä–∏–≤—ã—á–∫—É <b>{title}</b> ({schedule_type}) –Ω–∞ {habit_time.strftime('%H:%M')}.\n\n"
        "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω—ã! ‚úÖ",
        reply_markup=builder.as_markup(),
    )

    await state.clear()
    await callback.answer()
    logger.info(f"User {user_id} created habit {habit_id}: {title}")


@router.callback_query(StateFilter(AddHabitStates.confirmation), F.data == "habit_confirm_cancel")
async def cancel_habit_creation(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω—è–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏."""
    await callback.message.edit_text("–û—Ç–º–µ–Ω–∏–ª —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏.")
    await state.clear()
    await callback.answer()
    logger.info(f"User {callback.from_user.id} cancelled habit creation")


def is_in_quiet_hours(current_time: dt_time, quiet_from: dt_time, quiet_to: dt_time) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø–æ–ø–∞–¥–∞–µ—Ç –ª–∏ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ —Ç–∏—Ö–∏–µ —á–∞—Å—ã."""
    if quiet_from is None or quiet_to is None:
        return False

    # –ï—Å–ª–∏ —Ç–∏—Ö–∏–µ —á–∞—Å—ã –ø–µ—Ä–µ—Ö–æ–¥—è—Ç —á–µ—Ä–µ–∑ –ø–æ–ª–Ω–æ—á—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, 22:30 - 07:00)
    if quiet_from > quiet_to:
        return current_time >= quiet_from or current_time <= quiet_to
    else:
        return quiet_from <= current_time <= quiet_to


async def check_duplicate_completion(user_id: int, habit_id: int, completion_date: date) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –±—ã–ª–∞ –ª–∏ –ø—Ä–∏–≤—ã—á–∫–∞ —É–∂–µ –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è —Å–µ–≥–æ–¥–Ω—è."""
    async with SessionLocal() as session:
        result = await session.execute(
            select(HabitCompletion).where(
                HabitCompletion.user_id == user_id,
                HabitCompletion.habit_id == habit_id,
                HabitCompletion.completion_date == completion_date,
                HabitCompletion.status == "done",
            )
        )
        existing = result.scalar_one_or_none()
        return existing is not None


# Callback handlers –ø–æ —Å—Ö–µ–º–µ –∏–∑ callback_data.py:
# H_D:{habit_id}:{date} ‚Äî done (—Å–¥–µ–ª–∞–ª)
@router.callback_query(F.data.startswith("H_D:"))
async def habit_done_callback(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–°–¥–µ–ª–∞–ª' –¥–ª—è –ø—Ä–∏–≤—ã—á–∫–∏."""
    user_id = callback.from_user.id

    # –ü–∞—Ä—Å–∏–º callback_data: H_D:{habit_id}:{date}
    parts = callback.data.split(":")
    if len(parts) != 3:
        await callback.answer("–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
        return

    habit_id = int(parts[1])
    completion_date_str = parts[2]  # YYYYMMDD
    completion_date = datetime.strptime(completion_date_str, "%Y%m%d").date()

    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–≤—ã—á–∫—É
    async with SessionLocal() as session:
        habit = await session.get(Habits, habit_id)
        if not habit:
            await callback.answer("–ü—Ä–∏–≤—ã—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç
        if await check_duplicate_completion(user_id, habit_id, completion_date):
            await callback.message.edit_text("–£–∂–µ –∑–∞–ø–∏—Å–∞–ª —ç—Ç–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ üëå")
            await callback.answer()
            logger.info(f"User {user_id} tried to complete habit {habit_id} again on {completion_date}")
            return

        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏
        completion = HabitCompletion(
            habit_id=habit_id,
            user_id=user_id,
            completion_date=completion_date,
            status="done",
        )
        session.add(completion)
        await session.commit()

    # –°–ª—É—á–∞–π–Ω—ã–π —ç–º–æ–¥–∑–∏ –¥–ª—è –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–æ–¥–∫—Ä–µ–ø–ª–µ–Ω–∏—è
    emoji = random.choice(COMPLETION_EMOJIS)

    await callback.message.edit_text(
        f"–û—Ç–ª–∏—á–Ω–æ, –∑–∞—á—ë–ª ¬´{habit.title}¬ª –∑–∞ {completion_date.strftime('%d.%m.%Y')} {emoji}"
    )

    await callback.answer()
    logger.info(f"User {user_id} completed habit {habit_id} on {completion_date}")


# H_S:{habit_id}:{date} ‚Äî skip (–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å)
@router.callback_query(F.data.startswith("H_S:"))
async def habit_skip_callback(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å' –¥–ª—è –ø—Ä–∏–≤—ã—á–∫–∏."""
    user_id = callback.from_user.id

    # –ü–∞—Ä—Å–∏–º callback_data
    parts = callback.data.split(":")
    if len(parts) != 3:
        await callback.answer("–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
        return

    habit_id = int(parts[1])
    completion_date_str = parts[2]
    completion_date = datetime.strptime(completion_date_str, "%Y%m%d").date()

    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–≤—ã—á–∫—É
    async with SessionLocal() as session:
        habit = await session.get(Habits, habit_id)
        if not habit:
            await callback.answer("–ü—Ä–∏–≤—ã—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return

        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –ø—Ä–æ–ø—É—Å–∫–µ
        completion = HabitCompletion(
            habit_id=habit_id,
            user_id=user_id,
            completion_date=completion_date,
            status="skipped",
        )
        session.add(completion)
        await session.commit()

    await callback.message.edit_text("–û–∫–µ–π, –ø–æ–º–µ—Ç–∏–ª –∫–∞–∫ –ø—Ä–æ–ø—É—Å–∫. –í–µ—á–µ—Ä–æ–º —Ä–∞–∑–±–µ—Ä—ë–º, —á—Ç–æ –ø–æ–º–µ—à–∞–ª–æ.")

    await callback.answer()
    logger.info(f"User {user_id} skipped habit {habit_id} on {completion_date}")


# H_Z:{habit_id}:{minutes} ‚Äî snooze (–æ—Ç–ª–æ–∂–∏—Ç—å)
@router.callback_query(F.data.startswith("H_Z:"))
async def habit_snooze_callback(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–û—Ç–ª–æ–∂–∏—Ç—å' –¥–ª—è –ø—Ä–∏–≤—ã—á–∫–∏."""
    user_id = callback.from_user.id

    # –ü–∞—Ä—Å–∏–º callback_data
    parts = callback.data.split(":")
    if len(parts) != 3:
        await callback.answer("–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
        return

    habit_id = int(parts[1])
    snooze_minutes = int(parts[2])

    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–≤—ã—á–∫—É –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    async with SessionLocal() as session:
        habit = await session.get(Habits, habit_id)

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ user_id (Telegram ID), –∞ –Ω–µ –ø–æ primary key
        result = await session.execute(select(User).where(User.user_id == user_id))
        user = result.scalar_one_or_none()

        if not habit:
            await callback.answer("–ü—Ä–∏–≤—ã—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return

        if not user:
            await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏—Ö–∏–µ —á–∞—Å—ã
        current_time = datetime.now().time()
        if is_in_quiet_hours(current_time, user.quiet_hours_from, user.quiet_hours_to):
            await callback.message.edit_text("–¢–∏—Ö–∏–µ —á–∞—Å—ã ‚Äî –Ω–∞–ø–æ–º–Ω—é —É—Ç—Ä–æ–º üåÖ")
            await callback.answer()
            logger.info(f"User {user_id} tried to snooze habit {habit_id} during quiet hours")
            return

    await callback.message.edit_text(f"–•–æ—Ä–æ—à–æ, –Ω–∞–ø–æ–º–Ω—é —á–µ—Ä–µ–∑ {snooze_minutes} –º–∏–Ω—É—Ç ‚è∞")

    await callback.answer()
    logger.info(f"User {user_id} snoozed habit {habit_id} for {snooze_minutes} minutes")


# H_TOGGLE:{habit_id}:{on|off} ‚Äî toggle active status
@router.callback_query(F.data.startswith("H_TOGGLE:"))
async def habit_toggle_callback(callback: CallbackQuery, scheduler=None):
    """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø—Ä–∏–≤—ã—á–∫–∏ (–≤–∫–ª/–≤—ã–∫–ª)."""
    user_id = callback.from_user.id

    # –ü–∞—Ä—Å–∏–º callback_data: H_TOGGLE:{habit_id}:{on|off}
    parts = callback.data.split(":")
    if len(parts) != 3:
        await callback.answer("–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
        return

    habit_id = int(parts[1])
    action = parts[2]  # "on" –∏–ª–∏ "off"

    async with SessionLocal() as session:
        habit = await session.get(Habits, habit_id)
        if not habit or habit.user_id != user_id:
            await callback.answer("–ü—Ä–∏–≤—ã—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return

        # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Å—Ç–∞—Ç—É—Å
        habit.active = action == "on"
        await session.commit()

        # status_emoji = "‚úÖ" if habit.active else "‚è∏"
        status_text = "–≤–∫–ª—é—á–µ–Ω–∞" if habit.active else "–ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞"

    # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π —Å—Ä–∞–∑—É –±–µ–∑ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
    if scheduler:
        await scheduler.schedule_user_reminders(user_id)

    await callback.answer(f"–ü—Ä–∏–≤—ã—á–∫–∞ ¬´{habit.title}¬ª {status_text}", show_alert=False)
    logger.info(f"User {user_id} toggled habit {habit_id} to {'active' if habit.active else 'paused'}")

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º —Å—Ç–∞—Ç—É—Å–æ–º
    await refresh_habits_list(callback.message, user_id)


# H_DEL:{habit_id} ‚Äî delete habit with confirmation
@router.callback_query(F.data.startswith("H_DEL:"))
async def habit_delete_callback(callback: CallbackQuery):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–∏–≤—ã—á–∫–∏."""
    user_id = callback.from_user.id

    # –ü–∞—Ä—Å–∏–º callback_data
    parts = callback.data.split(":")
    if len(parts) != 2:
        await callback.answer("–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
        return

    habit_id = int(parts[1])

    async with SessionLocal() as session:
        habit = await session.get(Habits, habit_id)
        if not habit or habit.user_id != user_id:
            await callback.answer("–ü—Ä–∏–≤—ã—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return

        habit_title = habit.title

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    builder = InlineKeyboardBuilder()
    builder.button(text="üóë –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"H_DEL_CONFIRM:{habit_id}")
    builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="H_DEL_CANCEL")
    builder.adjust(1)

    await callback.message.edit_text(
        f"–£–¥–∞–ª–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É <b>{habit_title}</b>?\n\n" "–ò—Å—Ç–æ—Ä–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–∞–∫–∂–µ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–∞.",
        reply_markup=builder.as_markup(),
    )
    await callback.answer()


# H_DEL_CONFIRM:{habit_id} ‚Äî confirm deletion
@router.callback_query(F.data.startswith("H_DEL_CONFIRM:"))
async def habit_delete_confirm_callback(callback: CallbackQuery, scheduler=None):
    """–£–¥–∞–ª—è–µ—Ç –ø—Ä–∏–≤—ã—á–∫—É –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è."""
    user_id = callback.from_user.id

    habit_id = int(callback.data.split(":")[1])

    async with SessionLocal() as session:
        habit = await session.get(Habits, habit_id)
        if not habit or habit.user_id != user_id:
            await callback.answer("–ü—Ä–∏–≤—ã—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return

        habit_title = habit.title

        # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (–∫–∞—Å–∫–∞–¥–Ω–æ, –µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ –≤ –ë–î)
        # –ò–ª–∏ —è–≤–Ω–æ —É–¥–∞–ª—è–µ–º:
        await session.execute(select(HabitCompletion).where(HabitCompletion.habit_id == habit_id))
        completions = (
            (await session.execute(select(HabitCompletion).where(HabitCompletion.habit_id == habit_id)))
            .scalars()
            .all()
        )

        for completion in completions:
            await session.delete(completion)

        await session.delete(habit)
        await session.commit()

    # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π (—É–¥–∞–ª—è–µ–º –∑–∞–¥–∞–Ω–∏–µ)
    if scheduler:
        await scheduler.schedule_user_reminders(user_id)

    await callback.message.edit_text(
        f"–ü—Ä–∏–≤—ã—á–∫–∞ <b>{habit_title}</b> —É–¥–∞–ª–µ–Ω–∞.\n\n" "–í—Å–µ–≥–¥–∞ –º–æ–∂–µ—à—å —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é! /addhabit"
    )
    await callback.answer()
    logger.info(f"User {user_id} deleted habit {habit_id}")


# H_DEL_CANCEL ‚Äî cancel deletion
@router.callback_query(F.data == "H_DEL_CANCEL")
async def habit_delete_cancel_callback(callback: CallbackQuery):
    """–û—Ç–º–µ–Ω—è–µ—Ç —É–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏."""
    user_id = callback.from_user.id

    await callback.message.edit_text("–û—Ç–º–µ–Ω–∏–ª —É–¥–∞–ª–µ–Ω–∏–µ.")
    await callback.answer()

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –ø—Ä–∏–≤—ã—á–µ–∫
    await refresh_habits_list(callback.message, user_id)


# H_EDIT:{habit_id} ‚Äî edit menu
@router.callback_query(F.data.startswith("H_EDIT:"))
async def habit_edit_menu_callback(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∏–≤—ã—á–∫–∏."""
    user_id = callback.from_user.id

    habit_id = int(callback.data.split(":")[1])

    async with SessionLocal() as session:
        habit = await session.get(Habits, habit_id)
        if not habit or habit.user_id != user_id:
            await callback.answer("–ü—Ä–∏–≤—ã—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return

        status_emoji = "‚úÖ" if habit.active else "‚è∏"
        time_str = habit.time_of_day.strftime("%H:%M") if habit.time_of_day else "‚Äî"

        builder = InlineKeyboardBuilder()
        builder.button(text="üìù –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ", callback_data=f"H_ED_TTL:{habit_id}")
        builder.button(text="üìÖ –ò–∑–º–µ–Ω–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data=f"H_ED_SCH:{habit_id}")
        builder.button(text="üïê –ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è", callback_data=f"H_ED_TIM:{habit_id}")

        # –ö–Ω–æ–ø–∫–∞ –≤–∫–ª/–≤—ã–∫–ª
        toggle_text = "‚è∏ –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å" if habit.active else "‚ñ∂Ô∏è –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å"
        toggle_action = "off" if habit.active else "on"
        builder.button(text=toggle_text, callback_data=f"H_TOGGLE:{habit_id}:{toggle_action}")

        builder.button(text="üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"H_DEL:{habit_id}")
        builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="back_to_habits_list")
        builder.button(text="¬´ –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")
        builder.adjust(1)

    await callback.message.edit_text(
        f"–ü—Ä–∏–≤—ã—á–∫–∞: <b>{habit.title}</b>\n\n"
        f"–°—Ç–∞—Ç—É—Å: {status_emoji}\n"
        f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ: {habit.schedule_type}\n"
        f"–í—Ä–µ–º—è: {time_str}\n\n"
        "–ß—Ç–æ —Ö–æ—á–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å?",
        reply_markup=builder.as_markup(),
    )
    await callback.answer()


# Back to habits list
@router.callback_query(F.data == "back_to_habits_list")
async def back_to_habits_list_callback(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –∫ —Å–ø–∏—Å–∫—É –ø—Ä–∏–≤—ã—á–µ–∫."""
    user_id = callback.from_user.id
    await refresh_habits_list(callback.message, user_id)
    await callback.answer()


async def refresh_habits_list(message: Message, user_id: int):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –ø—Ä–∏–≤—ã—á–µ–∫ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏."""
    async with SessionLocal() as session:
        result = await session.execute(
            select(Habits).where(Habits.user_id == user_id).order_by(Habits.created_at)
        )
        habits = result.scalars().all()

    if not habits:
        builder = InlineKeyboardBuilder()
        builder.button(text="–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É", callback_data="add_habit_start")
        builder.adjust(1)

        await message.edit_text(
            '–£ —Ç–µ–±—è –µ—â—ë –Ω–µ—Ç –ø—Ä–∏–≤—ã—á–µ–∫. –ù–∞—á–Ω–∏ —Å –º–∞–ª–µ–Ω—å–∫–æ–π, –Ω–∞–ø—Ä–∏–º–µ—Ä: "–ß—Ç–µ–Ω–∏–µ 10–º".',
            reply_markup=builder.as_markup(),
        )
        return

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å –∫–Ω–æ–ø–∫–∞–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–π –ø—Ä–∏–≤—ã—á–∫–∏
    habits_text = "–¢–≤–æ–∏ –ø—Ä–∏–≤—ã—á–∫–∏:\n\n"
    builder = InlineKeyboardBuilder()

    for i, habit in enumerate(habits, start=1):
        status = "‚úÖ" if habit.active else "‚è∏"
        time_str = habit.time_of_day.strftime("%H:%M") if habit.time_of_day else "‚Äî"
        habits_text += f"{i}. {status} <b>{habit.title}</b> ‚Äî {habit.schedule_type}, {time_str}\n"

        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –ø—Ä–∏–≤—ã—á–∫–∏
        builder.button(text=f"‚úèÔ∏è {i}", callback_data=f"H_EDIT:{habit.id}")

    # –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π –ø—Ä–∏–≤—ã—á–∫–∏
    builder.button(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â—ë", callback_data="add_habit_start")

    # Adjust: –ø–æ 4 –∫–Ω–æ–ø–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —Ä—è–¥, –∑–∞—Ç–µ–º –∫–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
    rows = []
    for i in range(0, len(habits), 4):
        rows.append(min(4, len(habits) - i))
    rows.append(1)  # –ö–Ω–æ–ø–∫–∞ "–î–æ–±–∞–≤–∏—Ç—å –µ—â—ë"
    builder.adjust(*rows)

    await message.edit_text(habits_text, reply_markup=builder.as_markup())


# H_ED_TTL:{habit_id} ‚Äî edit title
@router.callback_query(F.data.startswith("H_ED_TTL:"))
async def habit_edit_title_start(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–∏–≤—ã—á–∫–∏."""
    user_id = callback.from_user.id
    habit_id = int(callback.data.split(":")[1])

    async with SessionLocal() as session:
        habit = await session.get(Habits, habit_id)
        if not habit or habit.user_id != user_id:
            await callback.answer("–ü—Ä–∏–≤—ã—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return

        await state.update_data(editing_habit_id=habit_id, original_title=habit.title)

    await callback.message.edit_text(f"–¢–µ–∫—É—â–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: <b>{habit.title}</b>\n\n" "–í–≤–µ–¥–∏ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:")
    await state.set_state(EditHabitStates.edit_title)
    await callback.answer()


@router.message(StateFilter(EditHabitStates.edit_title))
async def habit_edit_title_process(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏."""
    new_title = message.text.strip()
    MAX_TITLE_LENGTH = 50

    if len(new_title) > MAX_TITLE_LENGTH:
        await message.answer(f"–ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (>{MAX_TITLE_LENGTH}). –ü–æ–ø—Ä–æ–±—É–π –∫–æ—Ä–æ—á–µ.")
        return

    data = await state.get_data()
    habit_id = data["editing_habit_id"]
    user_id = message.from_user.id

    async with SessionLocal() as session:
        habit = await session.get(Habits, habit_id)
        if not habit or habit.user_id != user_id:
            await message.answer("–ü—Ä–∏–≤—ã—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            await state.clear()
            return

        old_title = habit.title
        habit.title = new_title
        await session.commit()

    await message.answer(f"–ù–∞–∑–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–æ:\n" f"<s>{old_title}</s> ‚Üí <b>{new_title}</b> ‚úÖ")
    await state.clear()
    logger.info(f"User {user_id} renamed habit {habit_id} from '{old_title}' to '{new_title}'")


# H_ED_TIM:{habit_id} ‚Äî edit time
@router.callback_query(F.data.startswith("H_ED_TIM:"))
async def habit_edit_time_start(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–∏–≤—ã—á–∫–∏."""
    user_id = callback.from_user.id
    habit_id = int(callback.data.split(":")[1])

    async with SessionLocal() as session:
        habit = await session.get(Habits, habit_id)
        if not habit or habit.user_id != user_id:
            await callback.answer("–ü—Ä–∏–≤—ã—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return

        current_time_str = habit.time_of_day.strftime("%H:%M") if habit.time_of_day else "‚Äî"
        await state.update_data(editing_habit_id=habit_id)

    common_times = ["06:00", "07:00", "08:00", "12:00", "18:00", "20:00", "21:00"]
    builder = InlineKeyboardBuilder()
    for t in common_times:
        builder.button(text=t, callback_data=f"edit_time_{t}")
    builder.button(text="–í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é ‚å®Ô∏è", callback_data="edit_time_custom")
    builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="back_to_habits_list")
    builder.adjust(4)

    await callback.message.edit_text(
        f"–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: <b>{current_time_str}</b>\n\n" "–í—ã–±–µ—Ä–∏ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è:",
        reply_markup=builder.as_markup(),
    )
    await state.set_state(EditHabitStates.edit_time)
    await callback.answer()


@router.callback_query(StateFilter(EditHabitStates.edit_time), F.data.startswith("edit_time_"))
async def habit_edit_time_process(callback: CallbackQuery, state: FSMContext, scheduler=None):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –Ω–æ–≤–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏."""
    time_data = callback.data.split("edit_time_")[1]

    if time_data == "custom":
        await callback.message.edit_text(
            "–í–≤–µ–¥–∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ <b>HH:MM</b>\n\n" "–ù–∞–ø—Ä–∏–º–µ—Ä: <code>07:30</code>"
        )
        await state.update_data(time_custom=True)
        await callback.answer()
        return

    from .start import validate_time_format

    is_valid, parsed_time = validate_time_format(time_data)

    if not is_valid:
        await callback.answer("–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏", show_alert=True)
        return

    data = await state.get_data()
    habit_id = data["editing_habit_id"]
    user_id = callback.from_user.id

    async with SessionLocal() as session:
        habit = await session.get(Habits, habit_id)
        if not habit or habit.user_id != user_id:
            await callback.answer("–ü—Ä–∏–≤—ã—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            await state.clear()
            return

        old_time = habit.time_of_day.strftime("%H:%M") if habit.time_of_day else "‚Äî"
        habit.time_of_day = parsed_time
        await session.commit()

    # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π —Å—Ä–∞–∑—É –±–µ–∑ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
    if scheduler:
        await scheduler.schedule_user_reminders(user_id)

    await callback.message.edit_text(
        f"–í—Ä–µ–º—è –∏–∑–º–µ–Ω–µ–Ω–æ:\n" f"<s>{old_time}</s> ‚Üí <b>{time_data}</b> ‚úÖ\n\n" "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!"
    )
    await state.clear()
    await callback.answer()
    logger.info(f"User {user_id} changed habit {habit_id} time from {old_time} to {time_data}")


@router.message(StateFilter(EditHabitStates.edit_time))
async def habit_edit_time_custom(message: Message, state: FSMContext, scheduler=None):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä—É—á–Ω–æ–π –≤–≤–æ–¥ –≤—Ä–µ–º–µ–Ω–∏."""
    data = await state.get_data()
    if not data.get("time_custom"):
        return

    from .start import validate_time_format

    is_valid, parsed_time = validate_time_format(message.text)

    if not is_valid:
        await message.answer(
            f"–•–º, –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–ª –≤—Ä–µ–º—è ¬´{message.text}¬ª.\n\n"
            "–§–æ—Ä–º–∞—Ç: <b>HH:MM</b>, –ø—Ä–∏–º–µ—Ä: <code>07:30</code>\n\n"
            "–ü–æ–ø—Ä–æ–±—É–µ—à—å –µ—â—ë?"
        )
        return

    habit_id = data["editing_habit_id"]
    user_id = message.from_user.id

    async with SessionLocal() as session:
        habit = await session.get(Habits, habit_id)
        if not habit or habit.user_id != user_id:
            await message.answer("–ü—Ä–∏–≤—ã—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            await state.clear()
            return

        old_time = habit.time_of_day.strftime("%H:%M") if habit.time_of_day else "‚Äî"
        habit.time_of_day = parsed_time
        await session.commit()

    # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π —Å—Ä–∞–∑—É –±–µ–∑ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
    if scheduler:
        await scheduler.schedule_user_reminders(user_id)

    await message.answer(
        f"–í—Ä–µ–º—è –∏–∑–º–µ–Ω–µ–Ω–æ:\n"
        f"<s>{old_time}</s> ‚Üí <b>{parsed_time.strftime('%H:%M')}</b> ‚úÖ\n\n"
        "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!"
    )
    await state.clear()
    logger.info(
        f"User {user_id} changed habit {habit_id} time from {old_time} to {parsed_time.strftime('%H:%M')}"
    )


# H_ED_SCH:{habit_id} ‚Äî edit schedule (placeholder for now)
@router.callback_query(F.data.startswith("H_ED_SCH:"))
async def habit_edit_schedule_start(callback: CallbackQuery):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è (–ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ)."""
    await callback.answer(
        "–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.\n" "–£–¥–∞–ª–∏ –∏ —Å–æ–∑–¥–∞–π –Ω–æ–≤—É—é –ø—Ä–∏–≤—ã—á–∫—É —Å –Ω—É–∂–Ω—ã–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º.",
        show_alert=True,
    )
