import sys
from pathlib import Path

from aiogram import F, Router
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message
from aiogram.utils.keyboard import InlineKeyboardBuilder
from sqlalchemy import select

sys.path.insert(0, str(Path(__file__).parent.parent))

from config import logger
from db import Habits, SessionLocal, Task

router = Router()


@router.message(Command("menu"))
async def cmd_menu(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ /menu - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    builder = InlineKeyboardBuilder()

    # –ü–µ—Ä–≤—ã–π —Ä—è–¥ - –ø—Ä–∏–≤—ã—á–∫–∏
    builder.button(text="–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É", callback_data="add_habit_start")
    builder.button(text="–°–ø–∏—Å–æ–∫ –ø—Ä–∏–≤—ã—á–µ–∫", callback_data="list_habits")

    # –í—Ç–æ—Ä–æ–π —Ä—è–¥ - –∑–∞–¥–∞—á–∏
    builder.button(text="–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É", callback_data="add_task_start")
    builder.button(text="–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á", callback_data="list_tasks")

    # –¢—Ä–µ—Ç–∏–π —Ä—è–¥ - –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    builder.button(text="–î–µ–ª–µ–≥–∏—Ä–æ–≤–∞—Ç—å üë•", callback_data="show_delegate")
    builder.button(text="–ù–∞–∑–Ω–∞—á–µ–Ω–æ –º–Ω–µ üì•", callback_data="show_assigned")

    # –ß–µ—Ç–≤—ë—Ä—Ç—ã–π —Ä—è–¥ - –æ—Å–Ω–æ–≤–Ω–æ–µ
    builder.button(text="–°–µ–≥–æ–¥–Ω—è üìÖ", callback_data="show_today")
    builder.button(text="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ üìä", callback_data="show_stats")

    # –ü—è—Ç—ã–π —Ä—è–¥ - –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ
    builder.button(text="–ñ—É—Ä–Ω–∞–ª üìñ", callback_data="show_journal")
    builder.button(text="–≠–∫—Å–ø–æ—Ä—Ç üíæ", callback_data="show_export")

    # –®–µ—Å—Ç–æ–π —Ä—è–¥ - Language Learning
    builder.button(text="–ò–∑—É—á–µ–Ω–∏–µ —è–∑—ã–∫–æ–≤ üéß", callback_data="show_language")

    # –°–µ–¥—å–º–æ–π —Ä—è–¥ - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –ø–æ–º–æ—â—å
    builder.button(text="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚öôÔ∏è", callback_data="show_settings")
    builder.button(text="–ü–æ–º–æ—â—å ‚ùì", callback_data="show_help")

    builder.adjust(2, 2, 2, 2, 2, 1, 2)

    await message.answer("–ß—Ç–æ –¥–µ–ª–∞–µ–º?", reply_markup=builder.as_markup())
    logger.info(f"User {message.from_user.id} opened /menu")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é


@router.callback_query(F.data == "list_habits")
async def menu_list_habits(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø—Ä–∏–≤—ã—á–µ–∫ –∏–∑ –º–µ–Ω—é."""
    user_id = callback.from_user.id

    async with SessionLocal() as session:
        result = await session.execute(
            select(Habits).where(Habits.user_id == user_id).order_by(Habits.created_at)
        )
        habits = result.scalars().all()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—É—Å—Ç–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    if not habits:
        builder = InlineKeyboardBuilder()
        builder.button(text="–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É", callback_data="add_habit_start")
        builder.button(text="¬´ –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")
        builder.adjust(1)

        await callback.message.edit_text(
            '–£ —Ç–µ–±—è –µ—â—ë –Ω–µ—Ç –ø—Ä–∏–≤—ã—á–µ–∫. –ù–∞—á–Ω–∏ —Å –º–∞–ª–µ–Ω—å–∫–æ–π, –Ω–∞–ø—Ä–∏–º–µ—Ä: "–ß—Ç–µ–Ω–∏–µ 10–º".',
            reply_markup=builder.as_markup(),
        )
        await callback.answer()
        logger.info(f"User {user_id} viewed habits list from menu - empty")
        return

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å –∫–Ω–æ–ø–∫–∞–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    habits_text = "–¢–≤–æ–∏ –ø—Ä–∏–≤—ã—á–∫–∏:\n\n"
    builder = InlineKeyboardBuilder()

    for i, habit in enumerate(habits, start=1):
        status = "‚úÖ" if habit.active else "‚è∏"
        time_str = habit.time_of_day.strftime("%H:%M") if habit.time_of_day else "‚Äî"
        habits_text += f"{i}. {status} <b>{habit.title}</b> ‚Äî {habit.schedule_type}, {time_str}\n"

        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –ø—Ä–∏–≤—ã—á–∫–∏
        builder.button(text=f"‚úèÔ∏è {i}", callback_data=f"H_EDIT:{habit.id}")

    # –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π –ø—Ä–∏–≤—ã—á–∫–∏
    builder.button(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â—ë", callback_data="add_habit_start")
    builder.button(text="¬´ –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")

    # Adjust: –ø–æ 4 –∫–Ω–æ–ø–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —Ä—è–¥, –∑–∞—Ç–µ–º –∫–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
    rows = []
    for i in range(0, len(habits), 4):
        rows.append(min(4, len(habits) - i))
    rows.append(1)  # –ö–Ω–æ–ø–∫–∞ "–î–æ–±–∞–≤–∏—Ç—å –µ—â—ë"
    rows.append(1)  # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"
    builder.adjust(*rows)

    await callback.message.edit_text(habits_text, reply_markup=builder.as_markup())
    await callback.answer()
    logger.info(f"User {user_id} viewed habits list from menu - {len(habits)} habits")


@router.callback_query(F.data == "add_task_start")
async def menu_add_task(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –∏–∑ –º–µ–Ω—é."""
    from .tasks import AddTaskStates

    await state.set_state(AddTaskStates.enter_title)
    await callback.message.edit_text("–¢–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏?")
    await callback.answer()
    logger.info(f"User {callback.from_user.id} started adding task from menu")


@router.callback_query(F.data == "list_tasks")
async def menu_list_tasks(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ñ–∏–ª—å—Ç—Ä—ã –∑–∞–¥–∞—á –∏–∑ –º–µ–Ω—é."""
    builder = InlineKeyboardBuilder()
    builder.button(text="–°–µ–≥–æ–¥–Ω—è", callback_data="TASKS_FILTER:today")
    builder.button(text="–ù–µ–¥–µ–ª—è", callback_data="TASKS_FILTER:week")
    builder.button(text="–í—Å–µ", callback_data="TASKS_FILTER:all")
    builder.button(text="–ê–∫—Ç–∏–≤–Ω—ã–µ", callback_data="TASKS_FILTER:active")
    builder.button(text="–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ", callback_data="TASKS_FILTER:done")
    builder.button(text="¬´ –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")
    builder.adjust(2, 3, 1)

    await callback.message.edit_text("–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–¥–∞—á–∏ –∑–∞‚Ä¶", reply_markup=builder.as_markup())
    await callback.answer()
    logger.info(f"User {callback.from_user.id} opened tasks filter from menu")


@router.callback_query(F.data == "show_today")
async def menu_show_today(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–≤–æ–¥–∫—É –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∏–∑ –º–µ–Ω—é."""
    from datetime import datetime

    from .today import get_user_habits_count, get_user_tasks_count

    user_id = callback.from_user.id

    habits_count = await get_user_habits_count(user_id)
    tasks_done, tasks_total = await get_user_tasks_count(user_id)

    # –¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞
    today = datetime.now().strftime("%d.%m.%Y")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—É—Å—Ç—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    if habits_count == 0 and tasks_total == 0:
        # –°–æ–≤—Å–µ–º –ø—É—Å—Ç–æ - –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –¥–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–≤—É—é –ø—Ä–∏–≤—ã—á–∫—É
        builder = InlineKeyboardBuilder()
        builder.button(text="–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É", callback_data="add_habit_start")
        builder.button(text="¬´ –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")
        builder.adjust(1)

        await callback.message.edit_text(
            f"–°–µ–≥–æ–¥–Ω—è {today} üìÖ\n\n" "–ü—Ä–∏–≤—ã—á–µ–∫ –ø–æ–∫–∞ –Ω–µ—Ç. –î–æ–±–∞–≤–∏–º –ø–µ—Ä–≤—É—é?",
            reply_markup=builder.as_markup(),
        )
        await callback.answer()
        logger.info(f"User {user_id} viewed /today from menu - no habits, no tasks")
        return

    if habits_count == 0:
        # –ù–µ—Ç –ø—Ä–∏–≤—ã—á–µ–∫, –Ω–æ –µ—Å—Ç—å –∑–∞–¥–∞—á–∏
        builder = InlineKeyboardBuilder()
        builder.button(text="–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É", callback_data="add_habit_start")
        builder.button(text="–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–¥–∞—á–∏", callback_data="list_tasks")
        builder.button(text="¬´ –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")
        builder.adjust(1)

        await callback.message.edit_text(
            f"–°–µ–≥–æ–¥–Ω—è {today} üìÖ\n\n"
            f"–ü—Ä–∏–≤—ã—á–µ–∫ –ø–æ–∫–∞ –Ω–µ—Ç. –ó–∞–¥–∞—á–∏: {tasks_done}/{tasks_total}.\n\n"
            "–î–æ–±–∞–≤–∏–º –ø–µ—Ä–≤—É—é?",
            reply_markup=builder.as_markup(),
        )
        await callback.answer()
        logger.info(f"User {user_id} viewed /today from menu - no habits, {tasks_total} tasks")
        return

    if tasks_total == 0:
        # –ï—Å—Ç—å –ø—Ä–∏–≤—ã—á–∫–∏, –Ω–æ –Ω–µ—Ç –∑–∞–¥–∞—á
        builder = InlineKeyboardBuilder()
        builder.button(text="–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É", callback_data="add_task_start")
        builder.button(text="–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–≤—ã—á–∫–∏", callback_data="list_habits")
        builder.button(text="¬´ –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")
        builder.adjust(1)

        await callback.message.edit_text(
            f"–°–µ–≥–æ–¥–Ω—è {today} üìÖ\n\n"
            f"–ü—Ä–∏–≤—ã—á–∫–∏: 0/{habits_count}.\n\n"
            "–°–µ–≥–æ–¥–Ω—è –±–µ–∑ –∑–∞–¥–∞—á? –•–æ—á–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å?",
            reply_markup=builder.as_markup(),
        )
        await callback.answer()
        logger.info(f"User {user_id} viewed /today from menu - {habits_count} habits, no tasks")
        return

    # –ï—Å—Ç—å –∏ –ø—Ä–∏–≤—ã—á–∫–∏, –∏ –∑–∞–¥–∞—á–∏
    builder = InlineKeyboardBuilder()
    builder.button(text="–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–≤—ã—á–∫–∏", callback_data="list_habits")
    builder.button(text="–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–¥–∞—á–∏", callback_data="list_tasks")
    builder.button(text="¬´ –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")
    builder.adjust(1)

    await callback.message.edit_text(
        f"–°–µ–≥–æ–¥–Ω—è {today} üìÖ\n\n" f"–ü—Ä–∏–≤—ã—á–∫–∏: 0/{habits_count}\n" f"–ó–∞–¥–∞—á–∏: {tasks_done}/{tasks_total}",
        reply_markup=builder.as_markup(),
    )
    await callback.answer()
    logger.info(
        f"User {user_id} viewed /today from menu - {habits_count} habits, "
        f"{tasks_done}/{tasks_total} tasks"
    )


@router.callback_query(F.data == "show_stats")
async def menu_show_stats(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ –º–µ–Ω—é."""
    await callback.message.edit_text(
        "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n\n"
        "–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π /stats –¥–ª—è –±–∞–∑–æ–≤–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."
    )

    builder = InlineKeyboardBuilder()
    builder.button(text="¬´ –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")
    builder.adjust(1)

    await callback.message.edit_reply_markup(reply_markup=builder.as_markup())
    await callback.answer()
    logger.info(f"User {callback.from_user.id} viewed stats from menu")


@router.callback_query(F.data == "show_settings")
async def menu_show_settings(callback: CallbackQuery):
    """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –º–µ–Ω—é."""
    from db import User

    user_id = callback.from_user.id

    async with SessionLocal() as session:
        result = await session.execute(select(User).where(User.user_id == user_id))
        user = result.scalar_one_or_none()

        if not user or not user.lang:
            await callback.message.edit_text(
                "–ü—Ä–∏–≤–µ—Ç! –°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –ø—Ä–æ–π—Ç–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫—É.\n\n" "–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã."
            )
            await callback.answer()
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å —Ç–µ–∫—É—â–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
        lang_name = "–†—É—Å—Å–∫–∏–π" if user.lang == "ru" else "English"
        tz = user.tz or "UTC"

        quiet_from_str = (
            user.quiet_hours_from.strftime("%H:%M") if user.quiet_hours_from else "–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"
        )
        quiet_to_str = user.quiet_hours_to.strftime("%H:%M") if user.quiet_hours_to else "–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"

        morning_ping_str = (
            user.morning_ping_time.strftime("%H:%M") if user.morning_ping_time else "–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"
        )
        evening_ping_str = (
            user.evening_ping_time.strftime("%H:%M") if user.evening_ping_time else "–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"
        )

        builder = InlineKeyboardBuilder()
        builder.button(text="–Ø–∑—ã–∫", callback_data="settings_lang")
        builder.button(text="–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å", callback_data="settings_tz")
        builder.button(text="–¢–∏—Ö–∏–µ —á–∞—Å—ã", callback_data="settings_quiet")
        builder.button(text="–£—Ç—Ä–µ–Ω–Ω–∏–π –ø–∏–Ω–≥", callback_data="settings_morning")
        builder.button(text="–í–µ—á–µ—Ä–Ω–∏–π –æ—Ç—á—ë—Ç", callback_data="settings_evening")
        builder.button(text="¬´ –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")
        builder.adjust(1)

        await callback.message.edit_text(
            f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è:\n\n"
            f"–Ø–∑—ã–∫: <b>{lang_name}</b>\n"
            f"–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: <b>{tz}</b>\n"
            f"–¢–∏—Ö–∏–µ —á–∞—Å—ã: <b>{quiet_from_str} - {quiet_to_str}</b>\n"
            f"–£—Ç—Ä–µ–Ω–Ω–∏–π –ø–∏–Ω–≥: <b>{morning_ping_str}</b>\n"
            f"–í–µ—á–µ—Ä–Ω–∏–π –æ—Ç—á—ë—Ç: <b>{evening_ping_str}</b>\n\n"
            "–ß—Ç–æ —Ö–æ—á–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å?",
            reply_markup=builder.as_markup(),
        )

    await callback.answer()
    logger.info(f"User {callback.from_user.id} opened settings from menu")


@router.callback_query(F.data == "show_delegate")
async def menu_show_delegate(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏—è."""
    builder = InlineKeyboardBuilder()
    builder.button(text="–î–µ–ª–µ–≥–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á—É", callback_data="delegate_new")
    builder.button(text="–ú–æ–∏ –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ", callback_data="delegate_my")
    builder.button(text="¬´ –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")
    builder.adjust(1)

    await callback.message.edit_text(
        "üë• –î–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á\n\n" "–ß—Ç–æ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å?", reply_markup=builder.as_markup()
    )
    await callback.answer()
    logger.info(f"User {callback.from_user.id} opened delegation menu")


@router.callback_query(F.data == "show_assigned")
async def menu_show_assigned(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∑–∞–¥–∞—á–∏, –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
    from datetime import date as dt_date

    from db import DelegatedTask, User

    user_id = callback.from_user.id

    async with SessionLocal() as session:
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
        result = await session.execute(
            select(DelegatedTask)
            .where(
                DelegatedTask.assigned_to_user_id == user_id,
                DelegatedTask.status.in_(["pending_acceptance", "accepted"]),
            )
            .order_by(DelegatedTask.deadline)
        )
        delegated_tasks = result.scalars().all()

        if not delegated_tasks:
            builder = InlineKeyboardBuilder()
            builder.button(text="¬´ –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")
            builder.adjust(1)

            await callback.message.edit_text(
                "üì• –£ –≤–∞—Å –Ω–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á.", reply_markup=builder.as_markup()
            )
            await callback.answer()
            return

        # –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–∞—Ç—á–∞–º–∏ (fix N+1)
        task_ids = [dt.task_id for dt in delegated_tasks]
        user_ids = [dt.assigned_by_user_id for dt in delegated_tasks]

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–¥–∞—á–∏ –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º
        tasks_result = await session.execute(select(Task).where(Task.id.in_(task_ids)))
        tasks_map = {task.id: task for task in tasks_result.scalars().all()}

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º
        users_result = await session.execute(select(User).where(User.user_id.in_(user_ids)))
        users_map = {user.user_id: user for user in users_result.scalars().all()}

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫
        lines = []
        for dt in delegated_tasks:
            task = tasks_map.get(dt.task_id)
            assigned_by = users_map.get(dt.assigned_by_user_id)

            if not task or not assigned_by:
                continue

            status_emoji = {"pending_acceptance": "‚è≥", "accepted": "‚úÖ"}

            emoji = status_emoji.get(dt.status, "")
            deadline_str = dt.deadline.strftime("%d.%m")

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–∫–æ–ª—å–∫–æ –æ—Å—Ç–∞–ª–æ—Å—å –≤—Ä–µ–º–µ–Ω–∏
            days_left = (dt.deadline.date() - dt_date.today()).days
            if days_left < 0:
                time_left = f"‚ö†Ô∏è –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ –Ω–∞ {abs(days_left)} –¥–Ω"
            elif days_left == 0:
                time_left = "üî• –°–µ–≥–æ–¥–Ω—è!"
            elif days_left == 1:
                time_left = "–ó–∞–≤—Ç—Ä–∞"
            else:
                time_left = f"{days_left} –¥–Ω"

            lines.append(
                f"{emoji} <b>{task.title}</b>\n"
                f"   –æ—Ç {assigned_by.first_name} | {deadline_str} | {time_left}"
            )

        text = "\n\n".join(lines)

        builder = InlineKeyboardBuilder()
        for dt in delegated_tasks[:10]:  # –õ–∏–º–∏—Ç 10 –∑–∞–¥–∞—á
            task = tasks_map.get(dt.task_id)
            if task:
                builder.button(text=f"‚úèÔ∏è {task.title[:15]}...", callback_data=f"DT_EDIT:{dt.id}")
        builder.button(text="¬´ –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")
        builder.adjust(1)

        await callback.message.edit_text(
            f"<b>üì• –ù–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ –≤–∞–º –∑–∞–¥–∞—á–∏:</b>\n\n{text}", reply_markup=builder.as_markup()
        )

    await callback.answer()
    logger.info(f"User {callback.from_user.id} viewed assigned tasks from menu")


@router.callback_query(F.data == "back_to_menu")
async def menu_back(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    builder = InlineKeyboardBuilder()

    # –ü–µ—Ä–≤—ã–π —Ä—è–¥ - –ø—Ä–∏–≤—ã—á–∫–∏
    builder.button(text="–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É", callback_data="add_habit_start")
    builder.button(text="–°–ø–∏—Å–æ–∫ –ø—Ä–∏–≤—ã—á–µ–∫", callback_data="list_habits")

    # –í—Ç–æ—Ä–æ–π —Ä—è–¥ - –∑–∞–¥–∞—á–∏
    builder.button(text="–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É", callback_data="add_task_start")
    builder.button(text="–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á", callback_data="list_tasks")

    # –¢—Ä–µ—Ç–∏–π —Ä—è–¥ - –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    builder.button(text="–î–µ–ª–µ–≥–∏—Ä–æ–≤–∞—Ç—å üë•", callback_data="show_delegate")
    builder.button(text="–ù–∞–∑–Ω–∞—á–µ–Ω–æ –º–Ω–µ üì•", callback_data="show_assigned")

    # –ß–µ—Ç–≤—ë—Ä—Ç—ã–π —Ä—è–¥ - –æ—Å–Ω–æ–≤–Ω–æ–µ
    builder.button(text="–°–µ–≥–æ–¥–Ω—è üìÖ", callback_data="show_today")
    builder.button(text="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ üìä", callback_data="show_stats")

    # –ü—è—Ç—ã–π —Ä—è–¥ - –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ
    builder.button(text="–ñ—É—Ä–Ω–∞–ª üìñ", callback_data="show_journal")
    builder.button(text="–≠–∫—Å–ø–æ—Ä—Ç üíæ", callback_data="show_export")

    # –®–µ—Å—Ç–æ–π —Ä—è–¥ - Language Learning
    builder.button(text="–ò–∑—É—á–µ–Ω–∏–µ —è–∑—ã–∫–æ–≤ üéß", callback_data="show_language")

    # –°–µ–¥—å–º–æ–π —Ä—è–¥ - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –ø–æ–º–æ—â—å
    builder.button(text="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚öôÔ∏è", callback_data="show_settings")
    builder.button(text="–ü–æ–º–æ—â—å ‚ùì", callback_data="show_help")

    builder.adjust(2, 2, 2, 2, 2, 1, 2)

    await callback.message.edit_text("–ß—Ç–æ –¥–µ–ª–∞–µ–º?", reply_markup=builder.as_markup())
    await callback.answer()
    logger.info(f"User {callback.from_user.id} returned to menu")


@router.callback_query(F.data == "show_journal")
async def menu_show_journal(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∂—É—Ä–Ω–∞–ª –∏–∑ –º–µ–Ω—é."""
    builder = InlineKeyboardBuilder()
    builder.button(text="–î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å", callback_data="journal_add")
    builder.button(text="–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞ –Ω–µ–¥–µ–ª—é", callback_data="journal_week")
    builder.button(text="–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞ –º–µ—Å—è—Ü", callback_data="journal_month")
    builder.button(text="¬´ –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")
    builder.adjust(1)

    await callback.message.edit_text(
        "üìñ <b>–ñ—É—Ä–Ω–∞–ª –ø—Ä–∏–≤—ã—á–µ–∫</b>\n\n"
        "–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –≤–µ—Å—Ç–∏ –∑–∞–ø–∏—Å–∏ –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø—Ä–∏–≤—ã—á–µ–∫.\n\n"
        "–ß—Ç–æ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å?",
        reply_markup=builder.as_markup(),
    )
    await callback.answer()
    logger.info(f"User {callback.from_user.id} opened journal from menu")


@router.callback_query(F.data == "show_export")
async def menu_show_export(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —ç–∫—Å–ø–æ—Ä—Ç–∞/–∏–º–ø–æ—Ä—Ç–∞."""
    builder = InlineKeyboardBuilder()
    builder.button(text="–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö üì§", callback_data="export_data")
    builder.button(text="–ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö üì•", callback_data="import_data")
    builder.button(text="¬´ –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")
    builder.adjust(1)

    await callback.message.edit_text(
        "üíæ <b>–≠–∫—Å–ø–æ—Ä—Ç –∏ –∏–º–ø–æ—Ä—Ç</b>\n\n"
        "–°–æ—Ö—Ä–∞–Ω–∏ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ –∑–∞–≥—Ä—É–∑–∏ –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏.\n\n"
        "–ß—Ç–æ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å?",
        reply_markup=builder.as_markup(),
    )
    await callback.answer()
    logger.info(f"User {callback.from_user.id} opened export menu")


@router.callback_query(F.data == "show_language")
async def menu_show_language(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é Language Learning."""
    from db import UserLanguageSettings

    user_id = callback.from_user.id

    async with SessionLocal() as session:
        result = await session.execute(
            select(UserLanguageSettings).where(UserLanguageSettings.user_id == user_id)
        )
        settings = result.scalar_one_or_none()

        if not settings or not settings.api_token:
            # API –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω
            builder = InlineKeyboardBuilder()
            builder.button(text="–ù–∞—Å—Ç—Ä–æ–∏—Ç—å API", callback_data="lang_setup_start")
            builder.button(text="¬´ –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")
            builder.adjust(1)

            await callback.message.edit_text(
                "üéß <b>–ò–∑—É—á–µ–Ω–∏–µ —è–∑—ã–∫–æ–≤</b>\n\n"
                "–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π –∏–∑—É—á–µ–Ω–∏—è —è–∑—ã–∫–æ–≤ –Ω—É–∂–µ–Ω API —Ç–æ–∫–µ–Ω.\n\n"
                "–ù–∞—Å—Ç—Ä–æ–π API —Ç–æ–∫–µ–Ω, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å:",
                reply_markup=builder.as_markup(),
            )
        else:
            # API –Ω–∞—Å—Ç—Ä–æ–µ–Ω
            builder = InlineKeyboardBuilder()
            builder.button(text="–í—ã–±—Ä–∞—Ç—å –∫–Ω–∏–≥—É üìö", callback_data="lang_choose_book")
            builder.button(text="–ß–∏—Ç–∞—Ç—å üìñ", callback_data="lang_read")
            builder.button(text="–ì—Ä–∞–º–º–∞—Ç–∏–∫–∞ üìù", callback_data="lang_grammar")
            builder.button(text="–ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ üîî", callback_data="lang_schedule")
            builder.button(text="–°—Ç–∞—Ç—É—Å API ‚úÖ", callback_data="lang_status")
            builder.button(text="¬´ –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")
            builder.adjust(2, 2, 1, 1, 1)

            await callback.message.edit_text(
                "üéß <b>–ò–∑—É—á–µ–Ω–∏–µ —è–∑—ã–∫–æ–≤</b>\n\n" "–ß—Ç–æ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å?",
                reply_markup=builder.as_markup(),
            )

    await callback.answer()
    logger.info(f"User {callback.from_user.id} opened language menu")


@router.callback_query(F.data == "lang_setup_start")
async def menu_lang_setup(callback: CallbackQuery):
    """–ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫—É Language API."""
    await callback.message.edit_text(
        "üîë <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Language Learning API</b>\n\n"
        "–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π —á—Ç–µ–Ω–∏—è –∫–Ω–∏–≥ –Ω—É–∂–µ–Ω API —Ç–æ–∫–µ–Ω.\n\n"
        "<b>–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω:</b>\n"
        "1. –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ —Å–∞–π—Ç–µ Language Learning\n"
        "2. –í–æ–π–¥–∏—Ç–µ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç\n"
        "3. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª API Settings\n"
        "4. –°–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ —Ç–æ–∫–µ–Ω –¥–ª—è Telegram\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /language_setup –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏."
    )
    await callback.answer()
    logger.info(f"User {callback.from_user.id} started language setup from menu")


@router.callback_query(F.data == "lang_choose_book")
async def menu_lang_choose_book(callback: CallbackQuery):
    """–ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞ –≤—ã–±–æ—Ä –∫–Ω–∏–≥–∏."""
    await callback.message.edit_text(
        "üìö <b>–í—ã–±–æ—Ä –∫–Ω–∏–≥–∏</b>\n\n" "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /choose_book –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–Ω–∏–≥–∏ –¥–ª—è —á—Ç–µ–Ω–∏—è."
    )
    await callback.answer()


@router.callback_query(F.data == "lang_read")
async def menu_lang_read(callback: CallbackQuery):
    """–ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞ —á—Ç–µ–Ω–∏–µ."""
    await callback.message.edit_text(
        "üìñ <b>–ß—Ç–µ–Ω–∏–µ</b>\n\n" "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /read –¥–ª—è —á—Ç–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞."
    )
    await callback.answer()


@router.callback_query(F.data == "lang_grammar")
async def menu_lang_grammar(callback: CallbackQuery):
    """–ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞ –≥—Ä–∞–º–º–∞—Ç–∏–∫—É."""
    await callback.message.edit_text(
        "üìù <b>–ì—Ä–∞–º–º–∞—Ç–∏–∫–∞</b>\n\n" "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /grammar –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –≥—Ä–∞–º–º–∞—Ç–∏–∫–∏."
    )
    await callback.answer()


@router.callback_query(F.data == "lang_schedule")
async def menu_lang_schedule(callback: CallbackQuery):
    """–ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫—É —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è."""
    await callback.message.edit_text(
        "üîî <b>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∞—É–¥–∏–æ-–≤–æ—Ä–∫—Ñ–ª–æ—É</b>\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /audio_schedule –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ 3-—ç—Ç–∞–ø–Ω–æ–≥–æ —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞:\n"
        "1Ô∏è‚É£ –£—Ç—Ä–æ: –ê—É–¥–∏–æ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞\n"
        "2Ô∏è‚É£ –î–µ–Ω—å: –¢–µ–∫—Å—Ç –¥–ª—è —á—Ç–µ–Ω–∏—è\n"
        "3Ô∏è‚É£ –í–µ—á–µ—Ä: –í–æ–ø—Ä–æ—Å—ã –Ω–∞ –ø–æ–Ω–∏–º–∞–Ω–∏–µ"
    )
    await callback.answer()


@router.callback_query(F.data == "lang_status")
async def menu_lang_status(callback: CallbackQuery):
    """–ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞ —Å—Ç–∞—Ç—É—Å API."""
    await callback.message.edit_text(
        "‚úÖ <b>–°—Ç–∞—Ç—É—Å API</b>\n\n" "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /language_status –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ API."
    )
    await callback.answer()


@router.callback_query(F.data == "show_help")
async def menu_show_help(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–º–æ—â—å –∏–∑ –º–µ–Ω—é."""
    builder = InlineKeyboardBuilder()
    builder.button(text="¬´ –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")
    builder.adjust(1)

    help_text = (
        "‚ùì <b>–ü–æ–º–æ—â—å</b>\n\n"
        "<b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
        "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "/menu - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
        "/today - –°–≤–æ–¥–∫–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è\n\n"
        "<b>–ü—Ä–∏–≤—ã—á–∫–∏:</b>\n"
        "/addhabit - –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É\n"
        "/listhabits - –°–ø–∏—Å–æ–∫ –ø—Ä–∏–≤—ã—á–µ–∫\n\n"
        "<b>–ó–∞–¥–∞—á–∏:</b>\n"
        "/addtask - –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É\n"
        "/tasks - –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á\n\n"
        "<b>–î–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ:</b>\n"
        "/trust &lt;user_id&gt; - –î–æ–±–∞–≤–∏—Ç—å –≤ –¥–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ\n"
        "/delegate - –î–µ–ª–µ–≥–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á—É\n"
        "/delegated - –ú–æ–∏ –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ\n"
        "/assigned - –ù–∞–∑–Ω–∞—á–µ–Ω–æ –º–Ω–µ\n\n"
        "<b>–î—Ä—É–≥–æ–µ:</b>\n"
        "/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
        "/journal - –ñ—É—Ä–Ω–∞–ª\n"
        "/settings - –ù–∞—Å—Ç—Ä–æ–π–∫–∏\n\n"
    )

    await callback.message.edit_text(help_text, reply_markup=builder.as_markup())
    await callback.answer()
    logger.info(f"User {callback.from_user.id} opened help from menu")
