import re
import sys
from datetime import datetime, time
from pathlib import Path
from zoneinfo import ZoneInfo

from aiogram import F, Router
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import CallbackQuery, Message
from aiogram.utils.keyboard import InlineKeyboardBuilder
from sqlalchemy import select

# Add parent directory to path for imports
sys.path.insert(0, str(Path(__file__).parent.parent))

from config import logger
from db import SessionLocal, User

router = Router()


# FSM States –¥–ª—è –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞
class OnboardingStates(StatesGroup):
    language_selection = State()
    timezone_detection = State()
    timezone_confirmation = State()
    quiet_hours_selection = State()
    quiet_hours_custom = State()
    default_habits_selection = State()
    morning_ping_time = State()
    evening_ping_time = State()
    completed = State()


# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
def detect_timezone_from_telegram(user_language_code: str = None) -> str:
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –Ω–∞ –æ—Å–Ω–æ–≤–µ —è–∑—ã–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –¥—Ä—É–≥–∏—Ö –¥–∞–Ω–Ω—ã—Ö."""
    # –ü—Ä–æ—Å—Ç–∞—è —ç–≤—Ä–∏—Å—Ç–∏–∫–∞: –µ—Å–ª–∏ —è–∑—ã–∫ ru, –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º Europe/Moscow
    if user_language_code == "ru":
        return "Europe/Moscow"
    return "UTC"


def validate_time_format(time_str: str) -> tuple[bool, time | None]:
    """–í–∞–ª–∏–¥–∏—Ä—É–µ—Ç —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ HH:MM."""
    pattern = r"^([0-1]?[0-9]|2[0-3]):([0-5][0-9])$"
    match = re.match(pattern, time_str.strip())
    if match:
        hour, minute = int(match.group(1)), int(match.group(2))
        return True, time(hour, minute)
    return False, None


def format_timezone_confirmation(tz_name: str) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ."""
    try:
        tz = ZoneInfo(tz_name)
        current_time = datetime.now(tz).strftime("%H:%M")
        return f"{tz_name} (—Å–µ–π—á–∞—Å {current_time})"
    except Exception:
        return tz_name


async def save_user_data(user_id: int, data: dict):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î."""
    from sqlalchemy import select

    async with SessionLocal() as session:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º select –≤–º–µ—Å—Ç–æ get –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å async
        result = await session.execute(select(User).where(User.user_id == user_id))
        user = result.scalar_one_or_none()

        if not user:
            user = User(user_id=user_id)
            session.add(user)

        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—è
        if "first_name" in data:
            user.first_name = data["first_name"]
        if "lang" in data:
            user.lang = data["lang"]
        if "tz" in data:
            user.tz = data["tz"]
        if "quiet_hours_from" in data:
            user.quiet_hours_from = data["quiet_hours_from"]
        if "quiet_hours_to" in data:
            user.quiet_hours_to = data["quiet_hours_to"]
        if "morning_ping_time" in data:
            user.morning_ping_time = data["morning_ping_time"]
        if "evening_ping_time" in data:
            user.evening_ping_time = data["evening_ping_time"]

        await session.commit()
        await session.refresh(user)
        logger.info(f"Saved user {user_id} with lang={user.lang}")


async def get_user_onboarding_state(user_id: int) -> dict | None:
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î."""
    async with SessionLocal() as session:
        result = await session.execute(select(User).where(User.user_id == user_id))
        user = result.scalar_one_or_none()
        if user and user.lang:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –ø—Ä–æ—à–µ–ª –æ–Ω–±–æ—Ä–¥–∏–Ω–≥
            return {
                "completed": True,
                "lang": user.lang,
                "tz": user.tz,
                "quiet_hours_from": user.quiet_hours_from,
                "quiet_hours_to": user.quiet_hours_to,
            }
        return None


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π
@router.message(Command("start"))
async def cmd_start(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start - –Ω–∞—á–∞–ª–æ –∏–ª–∏ –ø–æ–≤—Ç–æ—Ä –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞."""
    user_state = await get_user_onboarding_state(message.from_user.id)

    # –ï—Å–ª–∏ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥ —É–∂–µ –ø—Ä–æ–π–¥–µ–Ω - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º /menu
    if user_state and user_state.get("completed"):
        await message.answer(
            f"–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {message.from_user.first_name}! üëã\n\n"
            "–¢—ã —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–∏–ª –±–æ—Ç–∞. –ò—Å–ø–æ–ª—å–∑—É–π /menu –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º.",
        )
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π –æ–Ω–±–æ—Ä–¥–∏–Ω–≥
    current_state = await state.get_state()
    if current_state and current_state != OnboardingStates.language_selection.state:
        builder = InlineKeyboardBuilder()
        builder.button(text="–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å ‚úÖ", callback_data="onboarding_resume")
        builder.button(text="–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ üîÑ", callback_data="onboarding_restart")
        builder.adjust(1)

        await message.answer(
            "–£ —Ç–µ–±—è –µ—Å—Ç—å –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞. –•–æ—á–µ—à—å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏–ª–∏ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ?",
            reply_markup=builder.as_markup(),
        )
        return

    # –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π –æ–Ω–±–æ—Ä–¥–∏–Ω–≥
    await start_onboarding(message, state)


async def start_onboarding(message: Message, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞ —Å –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞."""
    await state.clear()

    builder = InlineKeyboardBuilder()
    builder.button(text="–†—É—Å—Å–∫–∏–π üá∑üá∫", callback_data="lang_ru")
    builder.button(text="English üá¨üáß", callback_data="lang_en")
    builder.adjust(2)

    await state.update_data(
        first_name=message.from_user.first_name,
        user_id=message.from_user.id,
        started_at=datetime.now().isoformat(),
    )

    await message.answer(
        f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! üëã\n\n"
        "–Ø ‚Äî <b>–î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞—Ç–æ—Ä</b>. –ü–æ–º–æ–≥—É –ø—Ä–æ–∫–∞—á–∞—Ç—å –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É –∏ –¥–µ—Ä–∂–∞—Ç—å –∫—É—Ä—Å –Ω–∞ —Ü–µ–ª–∏.\n\n"
        "<b>–ß—Ç–æ —è —É–º–µ—é:</b>\n"
        "‚úÖ –¢—Ä–µ–∫–∏–Ω–≥ –ø—Ä–∏–≤—ã—á–µ–∫ —Å —É–º–Ω—ã–º–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏\n"
        "üìã –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∞–º–∏ —Å –¥–µ–¥–ª–∞–π–Ω–∞–º–∏\n"
        "üë• –î–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á –¥—Ä—É–≥–∏–º –ª—é–¥—è–º\n"
        "üéß –ò–∑—É—á–µ–Ω–∏–µ —è–∑—ã–∫–æ–≤ —Å –∞—É–¥–∏–æ-–≤–æ—Ä–∫—Ñ–ª–æ—É\n"
        "ü§ñ AI-–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–¥–∞–Ω–∏–π –¥–ª—è –ø—Ä–∏–≤—ã—á–µ–∫\n"
        "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –æ—Ç—á—ë—Ç—ã\n"
        "‚öôÔ∏è –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥ —Ç–≤–æ–π —Ä–µ–∂–∏–º\n\n"
        "–í—ã–±–µ—Ä–∏ —è–∑—ã–∫ –¥–ª—è –Ω–∞—á–∞–ª–∞:",
        reply_markup=builder.as_markup(),
    )

    await state.set_state(OnboardingStates.language_selection)
    logger.info(f"User {message.from_user.id} started onboarding")


@router.callback_query(F.data == "onboarding_resume")
async def resume_onboarding(callback: CallbackQuery):
    """–ü—Ä–æ–¥–æ–ª–∂–∞–µ—Ç –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π –æ–Ω–±–æ—Ä–¥–∏–Ω–≥."""
    await callback.message.edit_text("–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É! üöÄ")
    await callback.answer()


@router.callback_query(F.data == "onboarding_restart")
async def restart_onboarding(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –æ–Ω–±–æ—Ä–¥–∏–Ω–≥ –∑–∞–Ω–æ–≤–æ."""
    await callback.message.delete()
    await start_onboarding(callback.message, state)
    await callback.answer()


@router.callback_query(StateFilter(OnboardingStates.language_selection), F.data.startswith("lang_"))
async def process_language_selection(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞."""
    lang = callback.data.split("_")[1]
    await state.update_data(lang=lang)

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å
    detected_tz = detect_timezone_from_telegram(lang)
    await state.update_data(detected_tz=detected_tz)

    builder = InlineKeyboardBuilder()
    builder.button(text=f"–û—Å—Ç–∞–≤–∏—Ç—å {detected_tz} ‚úÖ", callback_data=f"tz_keep_{detected_tz}")
    builder.button(text="–ò–∑–º–µ–Ω–∏—Ç—å üåç", callback_data="tz_change")
    builder.adjust(1)

    tz_display = format_timezone_confirmation(detected_tz)

    await callback.message.edit_text(
        f"–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏ —Å–≤–æ–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å.\n\n" f"–û–ø—Ä–µ–¥–µ–ª–∏–ª: <b>{tz_display}</b>\n\n" "–í—Å—ë –≤–µ—Ä–Ω–æ?",
        reply_markup=builder.as_markup(),
    )

    await state.set_state(OnboardingStates.timezone_confirmation)
    await callback.answer()
    logger.info(f"User {callback.from_user.id} selected language: {lang}")


@router.callback_query(StateFilter(OnboardingStates.timezone_confirmation), F.data.startswith("tz_keep_"))
async def process_timezone_keep(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Å—Ç–∞–≤–ª—è–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å."""
    tz_name = callback.data.split("tz_keep_")[1]
    await state.update_data(tz=tz_name)

    await show_quiet_hours_selection(callback.message, state, edit=True)
    await callback.answer()


@router.callback_query(StateFilter(OnboardingStates.timezone_confirmation), F.data == "tz_change")
async def process_timezone_change(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å."""
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —á–∞—Å–æ–≤—ã–µ –ø–æ—è—Å–∞
    builder = InlineKeyboardBuilder()
    common_timezones = [
        ("Europe/Moscow", "–ú–æ—Å–∫–≤–∞ (MSK)"),
        ("Europe/London", "–õ–æ–Ω–¥–æ–Ω (GMT)"),
        ("America/New_York", "–ù—å—é-–ô–æ—Ä–∫ (EST)"),
        ("Asia/Tokyo", "–¢–æ–∫–∏–æ (JST)"),
        ("Europe/Paris", "–ü–∞—Ä–∏–∂ (CET)"),
        ("Asia/Dubai", "–î—É–±–∞–π (GST)"),
    ]

    for tz_name, tz_label in common_timezones:
        builder.button(text=tz_label, callback_data=f"tz_select_{tz_name}")

    builder.adjust(2)

    await callback.message.edit_text("–í—ã–±–µ—Ä–∏ —Å–≤–æ–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å:", reply_markup=builder.as_markup())

    await state.set_state(OnboardingStates.timezone_detection)
    await callback.answer()


@router.callback_query(StateFilter(OnboardingStates.timezone_detection), F.data.startswith("tz_select_"))
async def process_timezone_select(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞."""
    tz_name = callback.data.split("tz_select_")[1]
    await state.update_data(tz=tz_name)

    tz_display = format_timezone_confirmation(tz_name)
    builder = InlineKeyboardBuilder()
    builder.button(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å ‚úÖ", callback_data="tz_confirm")
    builder.button(text="–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π", callback_data="tz_change")
    builder.adjust(1)

    await callback.message.edit_text(
        f"–ü—Ä–æ–≤–µ—Ä–∏–º: —Å–µ–π—á–∞—Å <b>{tz_display}</b> –≤ —Ç–≤–æ–µ–π –∑–æ–Ω–µ.\n\n–í—Å—ë –≤–µ—Ä–Ω–æ?",
        reply_markup=builder.as_markup(),
    )

    await state.set_state(OnboardingStates.timezone_confirmation)
    await callback.answer()


@router.callback_query(StateFilter(OnboardingStates.timezone_confirmation), F.data == "tz_confirm")
async def confirm_timezone(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞."""
    await show_quiet_hours_selection(callback.message, state, edit=True)
    await callback.answer()


async def show_quiet_hours_selection(message: Message, state: FSMContext, edit: bool = False):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ç–∏—Ö–∏—Ö —á–∞—Å–æ–≤."""
    builder = InlineKeyboardBuilder()
    builder.button(text="22:30 ‚Äì 07:00", callback_data="quiet_22:30-07:00")
    builder.button(text="23:00 ‚Äì 07:30", callback_data="quiet_23:00-07:30")
    builder.button(text="00:00 ‚Äì 08:00", callback_data="quiet_00:00-08:00")
    builder.button(text="–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –≤—Ä—É—á–Ω—É—é ‚öôÔ∏è", callback_data="quiet_custom")
    builder.button(text="–ù–µ –±–µ—Å–ø–æ–∫–æ–∏—Ç—å –∫—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω–æ üîï", callback_data="quiet_always")
    builder.adjust(1)

    text = "–ö–æ–≥–¥–∞ –Ω–µ –±–µ—Å–ø–æ–∫–æ–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏?\n\n" "–í—ã–±–µ—Ä–∏ –¥–∏–∞–ø–∞–∑–æ–Ω <b>—Ç–∏—Ö–∏—Ö —á–∞—Å–æ–≤</b> –∏–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π –≤—Ä—É—á–Ω—É—é:"

    if edit:
        await message.edit_text(text, reply_markup=builder.as_markup())
    else:
        await message.answer(text, reply_markup=builder.as_markup())

    await state.set_state(OnboardingStates.quiet_hours_selection)


@router.callback_query(StateFilter(OnboardingStates.quiet_hours_selection), F.data.startswith("quiet_"))
async def process_quiet_hours(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏—Ö–∏—Ö —á–∞—Å–æ–≤."""
    quiet_data = callback.data.split("quiet_")[1]

    if quiet_data == "custom":
        await callback.message.edit_text(
            "–í–≤–µ–¥–∏ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Ç–∏—Ö–∏—Ö —á–∞—Å–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ <b>HH:MM</b>\n\n" "–ù–∞–ø—Ä–∏–º–µ—Ä: <code>22:30</code>"
        )
        await state.set_state(OnboardingStates.quiet_hours_custom)
        await state.update_data(quiet_custom_step="start")
        await callback.answer()
        return

    if quiet_data == "always":
        await state.update_data(quiet_hours_from=None, quiet_hours_to=None)
    else:
        # –ü–∞—Ä—Å–∏–º –¥–∏–∞–ø–∞–∑–æ–Ω –≤–∏–¥–∞ "22:30-07:00"
        start_str, end_str = quiet_data.split("-")
        _, start_time = validate_time_format(start_str)
        _, end_time = validate_time_format(end_str)
        await state.update_data(quiet_hours_from=start_time, quiet_hours_to=end_time)

    await show_default_habits_selection(callback.message, state, edit=True)
    await callback.answer()


@router.message(StateFilter(OnboardingStates.quiet_hours_custom))
async def process_quiet_hours_custom_input(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ —Ç–∏—Ö–∏—Ö —á–∞—Å–æ–≤."""
    data = await state.get_data()
    step = data.get("quiet_custom_step")

    is_valid, parsed_time = validate_time_format(message.text)

    if not is_valid:
        await message.answer(
            f"–•–º, –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–ª –≤—Ä–µ–º—è ¬´{message.text}¬ª.\n\n"
            "–§–æ—Ä–º–∞—Ç: <b>HH:MM</b>, –ø—Ä–∏–º–µ—Ä: <code>07:30</code>\n\n"
            "–ü–æ–ø—Ä–æ–±—É–µ—à—å –µ—â—ë?"
        )
        return

    if step == "start":
        await state.update_data(quiet_hours_from=parsed_time, quiet_custom_step="end")
        await message.answer(
            f"–ù–∞—á–∞–ª–æ: <b>{parsed_time.strftime('%H:%M')}</b> ‚úÖ\n\n"
            "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ç–∏—Ö–∏—Ö —á–∞—Å–æ–≤:"
        )
    elif step == "end":
        await state.update_data(quiet_hours_to=parsed_time)

        data = await state.get_data()
        start = data["quiet_hours_from"]

        await message.answer(
            f"–¢–∏—Ö–∏–µ —á–∞—Å—ã: <b>{start.strftime('%H:%M')} ‚Äì {parsed_time.strftime('%H:%M')}</b> ‚úÖ"
        )

        await show_default_habits_selection(message, state, edit=False)


async def show_default_habits_selection(message: Message, state: FSMContext, edit: bool = False):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö –ø—Ä–∏–≤—ã—á–µ–∫."""
    builder = InlineKeyboardBuilder()
    builder.button(text="–î–æ–±–∞–≤–∏—Ç—å –≤—Å—ë ‚úÖ", callback_data="habits_add_all")
    builder.button(text="–í—ã–±—Ä–∞—Ç—å –ø–æ –æ–¥–Ω–æ–π", callback_data="habits_choose")
    builder.button(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å ‚è≠", callback_data="habits_skip")
    builder.adjust(1)

    text = (
        "–ü—Ä–µ–¥–ª–∞–≥–∞—é –±–∞–∑–æ–≤—ã–π –Ω–∞–±–æ—Ä –ø—Ä–∏–≤—ã—á–µ–∫ –¥–ª—è —Å—Ç–∞—Ä—Ç–∞:\n\n"
        "‚Ä¢ <b>–§–æ–∫—É—Å 60 –º–∏–Ω</b> ‚Äî –≥–ª—É–±–æ–∫–∞—è —Ä–∞–±–æ—Ç–∞ –±–µ–∑ –æ—Ç–≤–ª–µ—á–µ–Ω–∏–π\n"
        "‚Ä¢ <b>–ó–∞—Ä—è–¥–∫–∞ 10 –º–∏–Ω</b> ‚Äî —É—Ç—Ä–µ–Ω–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å\n"
        "‚Ä¢ <b>–ß—Ç–µ–Ω–∏–µ 10 –º–∏–Ω</b> ‚Äî —Ä–∞–∑–≤–∏—Ç–∏–µ –∫—Ä—É–≥–æ–∑–æ—Ä–∞\n\n"
        "–î–æ–±–∞–≤–ª—è–µ–º?"
    )

    if edit:
        await message.edit_text(text, reply_markup=builder.as_markup())
    else:
        await message.answer(text, reply_markup=builder.as_markup())

    await state.set_state(OnboardingStates.default_habits_selection)


@router.callback_query(
    StateFilter(OnboardingStates.default_habits_selection),
    F.data.startswith("habits_"),
)
async def process_default_habits(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –±–∞–∑–æ–≤—ã—Ö –ø—Ä–∏–≤—ã—á–µ–∫."""
    action = callback.data.split("habits_")[1]

    if action == "add_all":
        await state.update_data(default_habits=["focus_60", "exercise_10", "reading_10"])
        await callback.message.edit_text("–û—Ç–ª–∏—á–Ω–æ! –î–æ–±–∞–≤–∏–ª –≤—Å–µ –ø—Ä–∏–≤—ã—á–∫–∏ ‚úÖ")
    elif action == "choose":
        await callback.message.edit_text(
            "–í—ã–±–æ—Ä –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –ø—Ä–∏–≤—ã—á–µ–∫ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –≤ —Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä—Å–∏–∏. "
            "–ü–æ–∫–∞ –¥–æ–±–∞–≤–ª—è—é –≤—Å–µ –±–∞–∑–æ–≤—ã–µ –ø—Ä–∏–≤—ã—á–∫–∏ ‚úÖ"
        )
        await state.update_data(default_habits=["focus_60", "exercise_10", "reading_10"])
    else:  # skip
        await state.update_data(default_habits=[])
        await callback.message.edit_text("–•–æ—Ä–æ—à–æ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–≤—ã—á–∫–∏ üëå")

    await show_morning_ping_selection(callback.message, state, edit=False)
    await callback.answer()


async def show_morning_ping_selection(message: Message, state: FSMContext, edit: bool = False):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏ —É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –ø–∏–Ω–≥–∞."""
    builder = InlineKeyboardBuilder()

    morning_times = ["06:00", "06:30", "07:00", "07:30", "08:00", "08:30", "09:00"]
    for t in morning_times:
        builder.button(text=t, callback_data=f"morning_{t}")

    builder.button(text="–í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é ‚å®Ô∏è", callback_data="morning_custom")
    builder.adjust(3)

    text = "–í–æ —Å–∫–æ–ª—å–∫–æ –ø—Ä–∏—Å—ã–ª–∞—Ç—å <b>—É—Ç—Ä–µ–Ω–Ω–∏–π –ø–∏–Ω–≥</b>?\n\n–í—ã–±–µ—Ä–∏ –≤—Ä–µ–º—è –∏–ª–∏ –≤–≤–µ–¥–∏ –≤—Ä—É—á–Ω—É—é:"

    if edit:
        await message.edit_text(text, reply_markup=builder.as_markup())
    else:
        await message.answer(text, reply_markup=builder.as_markup())

    await state.set_state(OnboardingStates.morning_ping_time)


@router.callback_query(StateFilter(OnboardingStates.morning_ping_time), F.data.startswith("morning_"))
async def process_morning_ping(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏ —É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –ø–∏–Ω–≥–∞."""
    time_data = callback.data.split("morning_")[1]

    if time_data == "custom":
        await callback.message.edit_text(
            "–í–≤–µ–¥–∏ –≤—Ä–µ–º—è —É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –ø–∏–Ω–≥–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ <b>HH:MM</b>\n\n" "–ù–∞–ø—Ä–∏–º–µ—Ä: <code>07:30</code>"
        )
        await state.update_data(morning_custom=True)
        await callback.answer()
        return

    _, parsed_time = validate_time_format(time_data)
    await state.update_data(morning_ping_time=parsed_time)

    await callback.message.edit_text(f"–£—Ç—Ä–µ–Ω–Ω–∏–π –ø–∏–Ω–≥: <b>{time_data}</b> ‚úÖ")
    await show_evening_ping_selection(callback.message, state, edit=False)
    await callback.answer()


@router.message(StateFilter(OnboardingStates.morning_ping_time))
async def process_morning_ping_custom(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏ —É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –ø–∏–Ω–≥–∞."""
    data = await state.get_data()
    if not data.get("morning_custom"):
        return

    is_valid, parsed_time = validate_time_format(message.text)

    if not is_valid:
        await message.answer(
            f"–•–º, –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–ª –≤—Ä–µ–º—è ¬´{message.text}¬ª.\n\n"
            "–§–æ—Ä–º–∞—Ç: <b>HH:MM</b>, –ø—Ä–∏–º–µ—Ä: <code>07:30</code>\n\n"
            "–ü–æ–ø—Ä–æ–±—É–µ—à—å –µ—â—ë?"
        )
        return

    await state.update_data(morning_ping_time=parsed_time, morning_custom=False)
    await message.answer(f"–£—Ç—Ä–µ–Ω–Ω–∏–π –ø–∏–Ω–≥: <b>{parsed_time.strftime('%H:%M')}</b> ‚úÖ")
    await show_evening_ping_selection(message, state, edit=False)


async def show_evening_ping_selection(message: Message, state: FSMContext, edit: bool = False):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏ –≤–µ—á–µ—Ä–Ω–µ–≥–æ –æ—Ç—á—ë—Ç–∞."""
    builder = InlineKeyboardBuilder()

    evening_times = ["19:00", "19:30", "20:00", "20:30", "21:00", "21:30", "22:00"]
    for t in evening_times:
        builder.button(text=t, callback_data=f"evening_{t}")

    builder.button(text="–í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é ‚å®Ô∏è", callback_data="evening_custom")
    builder.adjust(3)

    text = "–í–æ —Å–∫–æ–ª—å–∫–æ –ø—Ä–∏—Å—ã–ª–∞—Ç—å <b>–≤–µ—á–µ—Ä–Ω–∏–π –æ—Ç—á—ë—Ç</b>?\n\n–í—ã–±–µ—Ä–∏ –≤—Ä–µ–º—è –∏–ª–∏ –≤–≤–µ–¥–∏ –≤—Ä—É—á–Ω—É—é:"

    if edit:
        await message.edit_text(text, reply_markup=builder.as_markup())
    else:
        await message.answer(text, reply_markup=builder.as_markup())

    await state.set_state(OnboardingStates.evening_ping_time)


@router.callback_query(StateFilter(OnboardingStates.evening_ping_time), F.data.startswith("evening_"))
async def process_evening_ping(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏ –≤–µ—á–µ—Ä–Ω–µ–≥–æ –æ—Ç—á—ë—Ç–∞."""
    time_data = callback.data.split("evening_")[1]

    if time_data == "custom":
        await callback.message.edit_text(
            "–í–≤–µ–¥–∏ –≤—Ä–µ–º—è –≤–µ—á–µ—Ä–Ω–µ–≥–æ –æ—Ç—á—ë—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ <b>HH:MM</b>\n\n" "–ù–∞–ø—Ä–∏–º–µ—Ä: <code>20:00</code>"
        )
        await state.update_data(evening_custom=True)
        await callback.answer()
        return

    _, parsed_time = validate_time_format(time_data)
    await state.update_data(evening_ping_time=parsed_time)

    await callback.message.edit_text(f"–í–µ—á–µ—Ä–Ω–∏–π –æ—Ç—á—ë—Ç: <b>{time_data}</b> ‚úÖ")
    await complete_onboarding(callback.message, state)
    await callback.answer()


@router.message(StateFilter(OnboardingStates.evening_ping_time))
async def process_evening_ping_custom(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏ –≤–µ—á–µ—Ä–Ω–µ–≥–æ –æ—Ç—á—ë—Ç–∞."""
    data = await state.get_data()
    if not data.get("evening_custom"):
        return

    is_valid, parsed_time = validate_time_format(message.text)

    if not is_valid:
        await message.answer(
            f"–•–º, –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–ª –≤—Ä–µ–º—è ¬´{message.text}¬ª.\n\n"
            "–§–æ—Ä–º–∞—Ç: <b>HH:MM</b>, –ø—Ä–∏–º–µ—Ä: <code>20:00</code>\n\n"
            "–ü–æ–ø—Ä–æ–±—É–µ—à—å –µ—â—ë?"
        )
        return

    await state.update_data(evening_ping_time=parsed_time, evening_custom=False)
    await message.answer(f"–í–µ—á–µ—Ä–Ω–∏–π –æ—Ç—á—ë—Ç: <b>{parsed_time.strftime('%H:%M')}</b> ‚úÖ")
    await complete_onboarding(message, state)


async def complete_onboarding(message: Message, state: FSMContext):
    """–ó–∞–≤–µ—Ä—à–∞–µ—Ç –æ–Ω–±–æ—Ä–¥–∏–Ω–≥ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ."""
    data = await state.get_data()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
    await save_user_data(
        data["user_id"],
        {
            "first_name": data["first_name"],
            "lang": data["lang"],
            "tz": data["tz"],
            "quiet_hours_from": data.get("quiet_hours_from"),
            "quiet_hours_to": data.get("quiet_hours_to"),
            "morning_ping_time": data.get("morning_ping_time"),
            "evening_ping_time": data.get("evening_ping_time"),
        },
    )

    await state.set_state(OnboardingStates.completed)
    await state.clear()

    await message.answer(
        "üéâ <b>–ì–æ—Ç–æ–≤–æ!</b>\n\n"
        f"–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, {data['first_name']}!\n\n"
        "–¢–µ–ø–µ—Ä—å –Ω–∞–±–µ—Ä–∏ /today, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–≤–æ–¥–∫—É –Ω–∞ —Å–µ–≥–æ–¥–Ω—è, "
        "–∏–ª–∏ /menu –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º.\n\n"
        "–£–¥–∞—á–∏! üí™"
    )

    # –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥—Ö–≤–∞—Ç–∏—Ç –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º –∑–∞–ø—É—Å–∫–µ
    logger.info(f"User {data['user_id']} completed onboarding, scheduler will pick up on next restart")
