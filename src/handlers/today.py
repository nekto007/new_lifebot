import sys
from datetime import datetime
from pathlib import Path

from aiogram import F, Router
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message
from aiogram.utils.keyboard import InlineKeyboardBuilder
from sqlalchemy import select

sys.path.insert(0, str(Path(__file__).parent.parent))

from config import logger
from db import Habits, SessionLocal, Task, User

router = Router()


async def get_user_habits_count(user_id: int) -> int:
    """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–∏–≤—ã—á–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    async with SessionLocal() as session:
        result = await session.execute(
            select(Habits).where(Habits.user_id == user_id, Habits.active.is_(True))
        )
        habits = result.scalars().all()
        return len(habits)


async def get_user_tasks_count(user_id: int) -> tuple[int, int]:
    """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞—á (–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö, –≤—Å–µ–≥–æ)."""
    async with SessionLocal() as session:
        # –í—Å–µ –∑–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
        result_all = await session.execute(select(Task).where(Task.user_id == user_id))
        all_tasks = result_all.scalars().all()

        # –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
        result_done = await session.execute(
            select(Task).where(Task.user_id == user_id, Task.status == "done")
        )
        done_tasks = result_done.scalars().all()

        return len(done_tasks), len(all_tasks)


async def has_user(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏ –∑–∞–≤–µ—Ä—à–µ–Ω –ª–∏ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥."""
    from sqlalchemy import select

    async with SessionLocal() as session:
        result = await session.execute(select(User).where(User.user_id == user_id))
        user = result.scalar_one_or_none()
        logger.info(f"Checking user {user_id}: exists={user is not None}, lang={user.lang if user else None}")
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ò –∑–∞–≤–µ—Ä—à–∏–ª –æ–Ω–±–æ—Ä–¥–∏–Ω–≥ (–µ—Å—Ç—å lang)
        return user is not None and user.lang is not None


@router.message(Command("today"))
async def cmd_today(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ /today - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–≤–æ–¥–∫—É –Ω–∞ —Å–µ–≥–æ–¥–Ω—è."""
    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—à–µ–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–Ω–±–æ—Ä–¥–∏–Ω–≥
    if not await has_user(user_id):
        await message.answer(
            "–ü—Ä–∏–≤–µ—Ç! –°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –ø—Ä–æ–π—Ç–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫—É.\n\n" "–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã."
        )
        return

    habits_count = await get_user_habits_count(user_id)
    tasks_done, tasks_total = await get_user_tasks_count(user_id)

    # –¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞
    today = datetime.now().strftime("%d.%m.%Y")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—É—Å—Ç—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    if habits_count == 0 and tasks_total == 0:
        # –°–æ–≤—Å–µ–º –ø—É—Å—Ç–æ - –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –¥–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–≤—É—é –ø—Ä–∏–≤—ã—á–∫—É
        builder = InlineKeyboardBuilder()
        builder.button(text="–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É", callback_data="add_first_habit")
        builder.adjust(1)

        await message.answer(
            f"–°–µ–≥–æ–¥–Ω—è {today} üìÖ\n\n" "–ü—Ä–∏–≤—ã—á–µ–∫ –ø–æ–∫–∞ –Ω–µ—Ç. –î–æ–±–∞–≤–∏–º –ø–µ—Ä–≤—É—é?¬ª [–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É]",
            reply_markup=builder.as_markup(),
        )
        logger.info(f"User {user_id} viewed /today - no habits, no tasks")
        return

    if habits_count == 0:
        # –ù–µ—Ç –ø—Ä–∏–≤—ã—á–µ–∫, –Ω–æ –µ—Å—Ç—å –∑–∞–¥–∞—á–∏
        builder = InlineKeyboardBuilder()
        builder.button(text="–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É", callback_data="add_first_habit")
        builder.button(text="–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–¥–∞—á–∏", callback_data="today_show_tasks")
        builder.adjust(1)

        await message.answer(
            f"–°–µ–≥–æ–¥–Ω—è {today} üìÖ\n\n"
            f"–ü—Ä–∏–≤—ã—á–µ–∫ –ø–æ–∫–∞ –Ω–µ—Ç. –ó–∞–¥–∞—á–∏: {tasks_done}/{tasks_total}.\n\n"
            "–î–æ–±–∞–≤–∏–º –ø–µ—Ä–≤—É—é?",
            reply_markup=builder.as_markup(),
        )
        logger.info(f"User {user_id} viewed /today - no habits, {tasks_total} tasks")
        return

    if tasks_total == 0:
        # –ï—Å—Ç—å –ø—Ä–∏–≤—ã—á–∫–∏, –Ω–æ –Ω–µ—Ç –∑–∞–¥–∞—á
        builder = InlineKeyboardBuilder()
        builder.button(text="–ü–æ—Å—Ç–∞–≤–∏—Ç—å 3 –≥–ª–∞–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏", callback_data="today_add_3_main")
        builder.button(text="–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–≤—ã—á–∫–∏", callback_data="today_show_habits")
        builder.adjust(1)

        await message.answer(
            f"–°–µ–≥–æ–¥–Ω—è {today} üìÖ\n\n"
            f"–ü—Ä–∏–≤—ã—á–∫–∏: 0/{habits_count}.\n\n"
            "–°–µ–≥–æ–¥–Ω—è –±–µ–∑ –∑–∞–¥–∞—á? –•–æ—á–µ—à—å –ø–æ—Å—Ç–∞–≤–∏—Ç—å 3 –≥–ª–∞–≤–Ω—ã–µ?",
            reply_markup=builder.as_markup(),
        )
        logger.info(f"User {user_id} viewed /today - {habits_count} habits, no tasks")
        return

    # –ï—Å—Ç—å –∏ –ø—Ä–∏–≤—ã—á–∫–∏, –∏ –∑–∞–¥–∞—á–∏
    builder = InlineKeyboardBuilder()

    builder.button(text="–î–æ–±–∞–≤–∏—Ç—å 3 –≥–ª–∞–≤–Ω—ã–µ", callback_data="today_add_3_main")

    builder.button(text="–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–≤—ã—á–∫–∏", callback_data="today_show_habits")
    builder.button(text="–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–¥–∞—á–∏", callback_data="today_show_tasks")
    builder.adjust(1)

    await message.answer(
        f"–°–µ–≥–æ–¥–Ω—è {today} üìÖ\n\n" f"–ü—Ä–∏–≤—ã—á–∫–∏: 0/{habits_count}\n" f"–ó–∞–¥–∞—á–∏: {tasks_done}/{tasks_total}",
        reply_markup=builder.as_markup(),
    )

    logger.info(f"User {user_id} viewed /today - {habits_count} habits, " f"{tasks_done}/{tasks_total} tasks")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –∏–∑ /today


@router.callback_query(F.data == "add_first_habit")
async def today_add_first_habit(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–≤–æ–π –ø—Ä–∏–≤—ã—á–∫–∏ –∏–∑ /today."""
    from .habits import AddHabitStates

    await state.clear()
    await callback.message.edit_text(
        "–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏? (–∫—Ä–∞—Ç–∫–æ)\n\n" "–ù–∞–ø—Ä–∏–º–µ—Ä: <i>–ß—Ç–µ–Ω–∏–µ 10–º</i>, <i>–ó–∞—Ä—è–¥–∫–∞</i>, <i>–ú–µ–¥–∏—Ç–∞—Ü–∏—è</i>"
    )
    await state.set_state(AddHabitStates.title)
    await state.update_data(user_id=callback.from_user.id)
    await callback.answer()
    logger.info(f"User {callback.from_user.id} started adding first habit from /today")


@router.callback_query(F.data == "today_show_habits")
async def today_show_habits(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø—Ä–∏–≤—ã—á–µ–∫ –∏–∑ /today."""
    user_id = callback.from_user.id

    async with SessionLocal() as session:
        result = await session.execute(
            select(Habits).where(Habits.user_id == user_id).order_by(Habits.created_at)
        )
        habits = result.scalars().all()

    if not habits:
        builder = InlineKeyboardBuilder()
        builder.button(text="–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É", callback_data="add_first_habit")
        builder.adjust(1)

        await callback.message.edit_text(
            '–£ —Ç–µ–±—è –µ—â—ë –Ω–µ—Ç –ø—Ä–∏–≤—ã—á–µ–∫. –ù–∞—á–Ω–∏ —Å –º–∞–ª–µ–Ω—å–∫–æ–π, –Ω–∞–ø—Ä–∏–º–µ—Ä: "–ß—Ç–µ–Ω–∏–µ 10–º".',
            reply_markup=builder.as_markup(),
        )
        await callback.answer()
        return

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫
    habits_text = "–¢–≤–æ–∏ –ø—Ä–∏–≤—ã—á–∫–∏:\n\n"
    builder = InlineKeyboardBuilder()

    for i, habit in enumerate(habits, start=1):
        status = "‚úÖ" if habit.active else "‚è∏"
        time_str = habit.time_of_day.strftime("%H:%M") if habit.time_of_day else "‚Äî"
        habits_text += f"{i}. {status} <b>{habit.title}</b> ‚Äî {habit.schedule_type}, {time_str}\n"
        builder.button(text=f"‚úèÔ∏è {i}", callback_data=f"H_EDIT:{habit.id}")

    builder.button(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â—ë", callback_data="add_first_habit")

    rows = []
    for i in range(0, len(habits), 4):
        rows.append(min(4, len(habits) - i))
    rows.append(1)
    builder.adjust(*rows)

    await callback.message.edit_text(habits_text, reply_markup=builder.as_markup())
    await callback.answer()


@router.callback_query(F.data == "today_show_tasks")
async def today_show_tasks(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ñ–∏–ª—å—Ç—Ä—ã –∑–∞–¥–∞—á –∏–∑ /today."""
    builder = InlineKeyboardBuilder()
    builder.button(text="–°–µ–≥–æ–¥–Ω—è", callback_data="TASKS_FILTER:today")
    builder.button(text="–ù–µ–¥–µ–ª—è", callback_data="TASKS_FILTER:week")
    builder.button(text="–í—Å–µ", callback_data="TASKS_FILTER:all")
    builder.button(text="–ê–∫—Ç–∏–≤–Ω—ã–µ", callback_data="TASKS_FILTER:active")
    builder.button(text="–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ", callback_data="TASKS_FILTER:done")
    builder.adjust(2, 3)

    await callback.message.edit_text("–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–¥–∞—á–∏ –∑–∞‚Ä¶", reply_markup=builder.as_markup())
    await callback.answer()


@router.callback_query(F.data == "today_add_3_main")
async def today_add_3_main(callback: CallbackQuery):
    """–ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å 3 –≥–ª–∞–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏."""
    await callback.message.edit_text(
        '–§—É–Ω–∫—Ü–∏—è "3 –≥–ª–∞–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏ –¥–Ω—è" –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.\n\n' "–ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–π /addtask –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á."
    )
    await callback.answer()
    logger.info(f"User {callback.from_user.id} clicked add 3 main tasks (placeholder)")
