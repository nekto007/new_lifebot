# src/handlers/language/settings.py

from aiogram import F, Router
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message
from api import APIAuthError, APIError, LanguageAPI
from config import logger
from db import SessionLocal, UserLanguageSettings
from sqlalchemy import select

router = Router()


class LanguageSetupStates(StatesGroup):
    waiting_for_token = State()
    configuring_audio_time = State()
    configuring_reading_time = State()
    configuring_questions_time = State()


@router.message(Command("language_setup"))
async def cmd_language_setup(message: Message, state: FSMContext):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Language Learning API —Ç–æ–∫–µ–Ω–∞"""
    user_id = message.from_user.id

    async with SessionLocal() as session:
        result = await session.execute(
            select(UserLanguageSettings).where(UserLanguageSettings.user_id == user_id)
        )
        settings = result.scalar_one_or_none()

        if settings and settings.api_token:
            await message.answer(
                "‚úÖ <b>–£ –≤–∞—Å —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω API —Ç–æ–∫–µ–Ω</b>\n\n"
                "–•–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –µ–≥–æ? –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω –∏–ª–∏ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã.",
            )
        else:
            await message.answer(
                "üîë <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Language Learning API</b>\n\n"
                "–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π —á—Ç–µ–Ω–∏—è –∫–Ω–∏–≥ –Ω—É–∂–µ–Ω API —Ç–æ–∫–µ–Ω.\n\n"
                "<b>–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω:</b>\n"
                "1. –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ —Å–∞–π—Ç–µ Language Learning\n"
                "2. –í–æ–π–¥–∏—Ç–µ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç\n"
                "3. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª API Settings\n"
                "4. –°–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ —Ç–æ–∫–µ–Ω –¥–ª—è Telegram\n\n"
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à —Ç–æ–∫–µ–Ω –∏–ª–∏ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã:"
            )

    await state.set_state(LanguageSetupStates.waiting_for_token)


@router.message(LanguageSetupStates.waiting_for_token, F.text == "/cancel")
async def cancel_setup(message: Message, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
    await state.clear()
    await message.answer("‚ùå –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")


@router.message(LanguageSetupStates.waiting_for_token)
async def process_token(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞"""
    token = message.text.strip()
    user_id = message.from_user.id

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–æ–∫–µ–Ω–æ–º –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    try:
        await message.delete()
    except Exception:
        pass  # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å - –Ω–µ —Å—Ç—Ä–∞—à–Ω–æ

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω, –ø—ã—Ç–∞—è—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–Ω–∏–≥
    processing_msg = await message.answer("‚è≥ –ü—Ä–æ–≤–µ—Ä—è—é —Ç–æ–∫–µ–Ω...")

    try:
        api = LanguageAPI(user_token=token)
        # –ü—Ä–æ–±—É–µ–º –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞
        books = await api.get_books()
        await api.close()

        # –¢–æ–∫–µ–Ω —Ä–∞–±–æ—Ç–∞–µ—Ç, —Å–æ—Ö—Ä–∞–Ω—è–µ–º
        async with SessionLocal() as session:
            result = await session.execute(
                select(UserLanguageSettings).where(UserLanguageSettings.user_id == user_id)
            )
            settings = result.scalar_one_or_none()

            if not settings:
                settings = UserLanguageSettings(user_id=user_id, api_token=token)
                session.add(settings)
            else:
                settings.api_token = token

            await session.commit()

        await processing_msg.edit_text(
            f"‚úÖ <b>–¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!</b>\n\n"
            f"üìö –ù–∞–π–¥–µ–Ω–æ –∫–Ω–∏–≥: {len(books)}\n\n"
            f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ:\n"
            f"‚Ä¢ /choose_book - –≤—ã–±—Ä–∞—Ç—å –∫–Ω–∏–≥—É\n"
            f"‚Ä¢ /read - –Ω–∞—á–∞—Ç—å —á—Ç–µ–Ω–∏–µ\n"
            f"‚Ä¢ /grammar - –∏–∑—É—á–∞—Ç—å –≥—Ä–∞–º–º–∞—Ç–∏–∫—É"
        )
        await state.clear()
        logger.info(f"User {user_id} configured Language API token")

    except APIAuthError:
        await processing_msg.edit_text(
            "‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω</b>\n\n"
            "–¢–æ–∫–µ–Ω –Ω–µ –ø—Ä–æ—à–µ–ª –ø—Ä–æ–≤–µ—Ä–∫—É. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ:\n"
            "‚Ä¢ –¢–æ–∫–µ–Ω —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –ø–æ–ª–Ω–æ—Å—Ç—å—é\n"
            "‚Ä¢ –¢–æ–∫–µ–Ω –Ω–µ –∏—Å—Ç–µ–∫\n"
            "‚Ä¢ –¢–æ–∫–µ–Ω –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è Telegram –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã:"
        )

    except APIError as e:
        await processing_msg.edit_text(
            f"‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞</b>\n\n"
            f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ API: {e}\n\n"
            f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã:"
        )
        logger.error(f"Token validation error for user {user_id}: {e}")

    except Exception as e:
        await processing_msg.edit_text(
            "‚ùå <b>–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞</b>\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã."
        )
        logger.error(f"Unexpected error validating token for user {user_id}: {e}")


@router.message(Command("language_status"))
async def cmd_language_status(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Language API"""
    user_id = message.from_user.id

    async with SessionLocal() as session:
        result = await session.execute(
            select(UserLanguageSettings).where(UserLanguageSettings.user_id == user_id)
        )
        settings = result.scalar_one_or_none()

        if not settings or not settings.api_token:
            await message.answer(
                "‚ùå <b>Language API –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω</b>\n\n" "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /language_setup –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏."
            )
        else:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞
            try:
                api = LanguageAPI(user_token=settings.api_token)
                books = await api.get_books()
                await api.close()

                status_text = (
                    "‚úÖ <b>Language API –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç</b>\n\n"
                    f"üìö –î–æ—Å—Ç—É–ø–Ω–æ –∫–Ω–∏–≥: {len(books)}\n"
                    f"üîß Fragment length: {settings.preferred_fragment_length} —Å–∏–º–≤–æ–ª–æ–≤\n"
                    f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {'–≤–∫–ª—é—á–µ–Ω—ã' if settings.reminder_enabled else '–≤—ã–∫–ª—é—á–µ–Ω—ã'}\n\n"
                    f"–ö–æ–º–∞–Ω–¥—ã:\n"
                    f"‚Ä¢ /choose_book - –≤—ã–±—Ä–∞—Ç—å –∫–Ω–∏–≥—É\n"
                    f"‚Ä¢ /read - —á–∏—Ç–∞—Ç—å\n"
                    f"‚Ä¢ /language_setup - –∏–∑–º–µ–Ω–∏—Ç—å —Ç–æ–∫–µ–Ω"
                )
            except APIAuthError:
                status_text = (
                    "‚ö†Ô∏è <b>–¢–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω</b>\n\n" "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /language_setup –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞."
                )
            except Exception as e:
                status_text = (
                    f"‚ö†Ô∏è <b>–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API</b>\n\n"
                    f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–∫–µ–Ω.\n\n"
                    f"–û—à–∏–±–∫–∞: {str(e)[:100]}"
                )

            await message.answer(status_text)


# ===== AUDIO WORKFLOW CONFIGURATION =====


@router.message(Command("audio_schedule"))
async def cmd_audio_schedule(message: Message, state: FSMContext):
    """–ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –∞—É–¥–∏–æ-—Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞"""
    user_id = message.from_user.id

    async with SessionLocal() as session:
        result = await session.execute(
            select(UserLanguageSettings).where(UserLanguageSettings.user_id == user_id)
        )
        settings = result.scalar_one_or_none()

        if not settings or not settings.api_token:
            await message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ Language API —á–µ—Ä–µ–∑ /language_setup")
            return

        current_status = (
            f"üìÖ <b>–¢–µ–∫—É—â–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∞—É–¥–∏–æ-—Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞</b>\n\n"
            f"üéß –ê—É–¥–∏–æ: {settings.audio_time or '–Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ'}\n"
            f"üìñ –ß—Ç–µ–Ω–∏–µ: {settings.reading_time or '–Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ'}\n"
            f"‚ùì –í–æ–ø—Ä–æ—Å—ã: {settings.questions_time or '–Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ'}\n"
            f"–°—Ç–∞—Ç—É—Å: {'‚úÖ –í–∫–ª—é—á–µ–Ω–æ' if settings.audio_enabled else '‚ùå –í—ã–∫–ª—é—á–µ–Ω–æ'}\n\n"
        )

        if settings.audio_time and settings.reading_time and settings.questions_time:
            current_status += (
                "–•–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ?\n"
                "‚Ä¢ /audio_time - –∏–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è –∞—É–¥–∏–æ\n"
                "‚Ä¢ /reading_time - –∏–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è —á—Ç–µ–Ω–∏—è\n"
                "‚Ä¢ /questions_time - –∏–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è –≤–æ–ø—Ä–æ—Å–æ–≤\n"
                "‚Ä¢ /audio_toggle - –≤–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –∞—É–¥–∏–æ\n"
                "‚Ä¢ /cancel - –æ—Ç–º–µ–Ω–∞"
            )
            await message.answer(current_status)
        else:
            current_status += (
                "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π—Ç–µ 3-—ç—Ç–∞–ø–Ω—ã–π —Ä–∞–±–æ—á–∏–π –ø—Ä–æ—Ü–µ—Å—Å:</b>\n\n"
                "1Ô∏è‚É£ <b>–£—Ç—Ä–æ:</b> –ê—É–¥–∏–æ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞ (–∑–∞ 1-2 —á–∞—Å–∞ –¥–æ —á—Ç–µ–Ω–∏—è)\n"
                "2Ô∏è‚É£ <b>–î–µ–Ω—å:</b> –¢–µ–∫—Å—Ç –¥–ª—è —á—Ç–µ–Ω–∏—è\n"
                "3Ô∏è‚É£ <b>–í–µ—á–µ—Ä:</b> –í–æ–ø—Ä–æ—Å—ã –Ω–∞ –ø–æ–Ω–∏–º–∞–Ω–∏–µ\n\n"
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤—Ä–µ–º—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞—É–¥–∏–æ (—Ñ–æ—Ä–º–∞—Ç HH:MM, –Ω–∞–ø—Ä–∏–º–µ—Ä 08:00):"
            )
            await message.answer(current_status)
            await state.set_state(LanguageSetupStates.configuring_audio_time)


@router.message(Command("audio_time"))
async def cmd_configure_audio_time(message: Message, state: FSMContext):
    """–ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞—É–¥–∏–æ"""
    await message.answer(
        "üéß <b>–í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞—É–¥–∏–æ</b>\n\n" "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM (–Ω–∞–ø—Ä–∏–º–µ—Ä, 08:00):"
    )
    await state.set_state(LanguageSetupStates.configuring_audio_time)


@router.message(Command("reading_time"))
async def cmd_configure_reading_time(message: Message, state: FSMContext):
    """–ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ–∫—Å—Ç–∞"""
    await message.answer(
        "üìñ <b>–í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —á—Ç–µ–Ω–∏—è</b>\n\n" "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM (–Ω–∞–ø—Ä–∏–º–µ—Ä, 10:00):"
    )
    await state.set_state(LanguageSetupStates.configuring_reading_time)


@router.message(Command("questions_time"))
async def cmd_configure_questions_time(message: Message, state: FSMContext):
    """–ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–æ–ø—Ä–æ—Å–æ–≤"""
    await message.answer(
        "‚ùì <b>–í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–æ–ø—Ä–æ—Å–æ–≤</b>\n\n" "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM (–Ω–∞–ø—Ä–∏–º–µ—Ä, 20:00):"
    )
    await state.set_state(LanguageSetupStates.configuring_questions_time)


@router.message(Command("audio_toggle"))
async def cmd_toggle_audio(message: Message):
    """–í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É –∞—É–¥–∏–æ"""
    user_id = message.from_user.id

    async with SessionLocal() as session:
        result = await session.execute(
            select(UserLanguageSettings).where(UserLanguageSettings.user_id == user_id)
        )
        settings = result.scalar_one_or_none()

        if not settings:
            await message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ Language API —á–µ—Ä–µ–∑ /language_setup")
            return

        settings.audio_enabled = not settings.audio_enabled
        await session.commit()

        status = "–≤–∫–ª—é—á–µ–Ω–∞" if settings.audio_enabled else "–≤—ã–∫–ª—é—á–µ–Ω–∞"
        await message.answer(f"{'‚úÖ' if settings.audio_enabled else '‚ùå'} –û—Ç–ø—Ä–∞–≤–∫–∞ –∞—É–¥–∏–æ {status}")


def _validate_time(time_str: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ HH:MM"""
    import re

    pattern = r"^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$"
    return bool(re.match(pattern, time_str))


@router.message(LanguageSetupStates.configuring_audio_time)
async def process_audio_time(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞—É–¥–∏–æ"""
    time_str = message.text.strip()
    user_id = message.from_user.id

    if not _validate_time(time_str):
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ HH:MM (–Ω–∞–ø—Ä–∏–º–µ—Ä, 08:00)")
        return

    async with SessionLocal() as session:
        result = await session.execute(
            select(UserLanguageSettings).where(UserLanguageSettings.user_id == user_id)
        )
        settings = result.scalar_one_or_none()

        if not settings:
            await message.answer("‚ùå –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            await state.clear()
            return

        settings.audio_time = time_str
        await session.commit()

    await message.answer(
        f"‚úÖ –í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞—É–¥–∏–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {time_str}\n\n"
        f"–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤—Ä–µ–º—è –¥–ª—è —á—Ç–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ (—Ñ–æ—Ä–º–∞—Ç HH:MM):"
    )
    await state.set_state(LanguageSetupStates.configuring_reading_time)


@router.message(LanguageSetupStates.configuring_reading_time)
async def process_reading_time(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ–∫—Å—Ç–∞"""
    time_str = message.text.strip()
    user_id = message.from_user.id

    if not _validate_time(time_str):
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ HH:MM (–Ω–∞–ø—Ä–∏–º–µ—Ä, 10:00)")
        return

    async with SessionLocal() as session:
        result = await session.execute(
            select(UserLanguageSettings).where(UserLanguageSettings.user_id == user_id)
        )
        settings = result.scalar_one_or_none()

        if not settings:
            await message.answer("‚ùå –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            await state.clear()
            return

        settings.reading_time = time_str
        await session.commit()

    await message.answer(
        f"‚úÖ –í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ–∫—Å—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {time_str}\n\n"
        f"–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤—Ä–µ–º—è –¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤ (—Ñ–æ—Ä–º–∞—Ç HH:MM):"
    )
    await state.set_state(LanguageSetupStates.configuring_questions_time)


@router.message(LanguageSetupStates.configuring_questions_time)
async def process_questions_time(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–æ–ø—Ä–æ—Å–æ–≤"""
    time_str = message.text.strip()
    user_id = message.from_user.id

    if not _validate_time(time_str):
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ HH:MM (–Ω–∞–ø—Ä–∏–º–µ—Ä, 20:00)")
        return

    async with SessionLocal() as session:
        result = await session.execute(
            select(UserLanguageSettings).where(UserLanguageSettings.user_id == user_id)
        )
        settings = result.scalar_one_or_none()

        if not settings:
            await message.answer("‚ùå –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            await state.clear()
            return

        settings.questions_time = time_str
        await session.commit()

        # Now schedule the workflow
        from bot import bot, scheduler
        from language_scheduler import LanguageReminderService

        reminder_service = LanguageReminderService(bot, scheduler)
        await reminder_service.schedule_audio_workflow(
            user_id=user_id,
            audio_time=settings.audio_time,
            reading_time=settings.reading_time,
            questions_time=settings.questions_time,
        )

    await message.answer(
        f"üéâ <b>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ!</b>\n\n"
        f"üéß –ê—É–¥–∏–æ: {settings.audio_time}\n"
        f"üìñ –ß—Ç–µ–Ω–∏–µ: {settings.reading_time}\n"
        f"‚ùì –í–æ–ø—Ä–æ—Å—ã: {settings.questions_time}\n\n"
        f"<b>–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:</b>\n"
        f"1Ô∏è‚É£ –£—Ç—Ä–æ–º –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –∞—É–¥–∏–æ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞\n"
        f"2Ô∏è‚É£ –î–Ω—ë–º ‚Äî —Ç–µ–∫—Å—Ç —ç—Ç–æ–≥–æ –∂–µ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞ –¥–ª—è —á—Ç–µ–Ω–∏—è\n"
        f"3Ô∏è‚É£ –í–µ—á–µ—Ä–æ–º ‚Äî –≤–æ–ø—Ä–æ—Å—ã –Ω–∞ –ø–æ–Ω–∏–º–∞–Ω–∏–µ\n\n"
        f"–ö–æ–º–∞–Ω–¥—ã:\n"
        f"‚Ä¢ /audio_schedule - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ\n"
        f"‚Ä¢ /audio_toggle - –≤—ã–∫–ª—é—á–∏—Ç—å/–≤–∫–ª—é—á–∏—Ç—å –∞—É–¥–∏–æ"
    )
    await state.clear()
