# src/handlers/language/reading.py

import re
from datetime import datetime

from aiogram import F, Router
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import CallbackQuery, Message
from api import APIAuthError, APIConnectionError, APIError, get_user_language_api
from db import LanguageHabit, LanguageProgress, SessionLocal
from keyboards.language import (
    get_reading_actions_keyboard,
    get_reading_keyboard,
)
from sqlalchemy import func, select


def escape_markdown(text: str) -> str:
    """–≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è MarkdownV2"""
    escape_chars = r"_*[]()~`>#+-=|{}.!"
    return re.sub(f"([{re.escape(escape_chars)}])", r"\\\1", text)


def trim_to_sentence(text: str, target_length: int = 1000) -> str:
    """
    –û–±—Ä–µ–∑–∞–µ—Ç —Ç–µ–∫—Å—Ç –¥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–∫–æ–Ω—á–µ–Ω–Ω–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è.

    Args:
        text: –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç
        target_length: –ñ–µ–ª–∞–µ–º–∞—è –¥–ª–∏–Ω–∞ (–±—É–¥–µ—Ç –∑–∞–ø—Ä–æ—à–µ–Ω–æ –±–æ–ª—å—à–µ, —á—Ç–æ–±—ã –Ω–µ –æ–±—Ä–µ–∑–∞—Ç—å –ø–æ—Å–µ—Ä–µ–¥–∏–Ω–µ)

    Returns:
        –¢–µ–∫—Å—Ç, –æ–±—Ä–µ–∑–∞–Ω–Ω—ã–π –ø–æ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—é
    """
    # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –∫–æ—Ä–æ—á–µ —Ü–µ–ª–µ–≤–æ–π –¥–ª–∏–Ω—ã - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
    if len(text) <= target_length:
        return text

    # –û–±—Ä–µ–∑–∞–µ–º –ø—Ä–∏–º–µ—Ä–Ω–æ –¥–æ —Ü–µ–ª–µ–≤–æ–π –¥–ª–∏–Ω—ã
    rough_cut = text[: target_length + 200]  # +200 –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–æ–Ω—Ü–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è

    # –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–Ω–∞–∫ –∫–æ–Ω—Ü–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
    sentence_endings = [". ", "! ", "? ", '."', '!"', '?"', ".\n", "!\n", "?\n"]

    best_position = -1
    for ending in sentence_endings:
        pos = rough_cut.rfind(ending)
        if pos > best_position and pos >= target_length - 100:  # –ù–µ –æ–±—Ä–µ–∑–∞–µ–º —Å–ª–∏—à–∫–æ–º —Ä–∞–Ω–æ
            best_position = pos + len(ending) - 1  # –í–∫–ª—é—á–∞–µ–º –∑–Ω–∞–∫ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è

    # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –ø–æ–¥—Ö–æ–¥—è—â–µ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
    if best_position > target_length * 0.7:  # –•–æ—Ç—è –±—ã 70% –æ—Ç —Ü–µ–ª–µ–≤–æ–π –¥–ª–∏–Ω—ã
        return rough_cut[: best_position + 1].strip()

    # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏, –æ–±—Ä–µ–∑–∞–µ–º –ø–æ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É —Å–ª–æ–≤—É
    rough_cut = text[:target_length]
    last_space = rough_cut.rfind(" ")
    if last_space > target_length * 0.8:
        return rough_cut[:last_space].strip()

    # –í –∫—Ä–∞–π–Ω–µ–º —Å–ª—É—á–∞–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
    return rough_cut.strip()


router = Router()


class ReadingStates(StatesGroup):
    choosing_book = State()
    reading = State()
    answering_questions = State()


async def _display_fragment(
    message: Message, fragment_data: dict, session, habit, state: FSMContext, user_id: int = None
):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ñ—Ä–∞–≥–º–µ–Ω—Ç –∫–Ω–∏–≥–∏ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""

    if fragment_data.get("finished"):
        await message.answer(
            f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –í—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏ –∫–Ω–∏–≥—É:\n"
            f"¬´{fragment_data['book']['title']}¬ª\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –∫–Ω–∏–≥—É: /choose_book"
        )
        habit.current_book_id = None
        await session.commit()
        await state.clear()
        return

    fragment = fragment_data["fragment"]
    book = fragment["book"]
    chapter = fragment["chapter"]

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç: –∑–∞–º–µ–Ω—è–µ–º \n –Ω–∞ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
    raw_text = fragment["text"].replace("\\n", "\n")

    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∂–µ–ª–∞–µ–º–æ–π –¥–ª–∏–Ω—ã
    if user_id:
        from db import UserLanguageSettings

        result = await session.execute(
            select(UserLanguageSettings).where(UserLanguageSettings.user_id == user_id)
        )
        settings = result.scalar_one_or_none()
        target_length = settings.preferred_fragment_length if settings else 1000
    else:
        target_length = 1000

    # –û–±—Ä–µ–∑–∞–µ–º –¥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
    text = trim_to_sentence(raw_text, target_length)

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    message_text = (
        f"üìñ <b>{book['title']}</b>\n"
        f"–ì–ª–∞–≤–∞ {chapter['number']}: {chapter['title']}\n"
        f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
        f"{text}\n\n"
        f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
        f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å –≥–ª–∞–≤—ã: {chapter['progress_pct']:.1f}%\n"
        f"üìà –û–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å: {book['overall_progress_pct']:.1f}%\n"
        f"üìÑ –ì–ª–∞–≤–∞ {book['current_chapter']}/{book['total_chapters']}\n"
        f"üìè –°–∏–º–≤–æ–ª–æ–≤: {len(text)}"
    )

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –ª–∏ –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" (–µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–µ—Ä–≤—ã–π —Ñ—Ä–∞–≥–º–µ–Ω—Ç)
    show_back = chapter["progress_pct"] > 0 or book["current_chapter"] > 1

    await message.answer(message_text, reply_markup=get_reading_actions_keyboard(show_back=show_back))


@router.message(Command("read"))
async def cmd_read(message: Message, state: FSMContext):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —á—Ç–µ–Ω–∏—è –¢–ï–ö–£–©–ï–ì–û —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞ (–Ω–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ!)"""
    user_id = message.from_user.id

    async with SessionLocal() as session:
        # –ü–æ–ª—É—á–∞–µ–º API –∫–ª–∏–µ–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        api = await get_user_language_api(session, user_id)
        if not api:
            await message.answer(
                "üîë <b>–¢—Ä–µ–±—É–µ—Ç—Å—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ API</b>\n\n"
                "–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π —á—Ç–µ–Ω–∏—è –Ω—É–∂–µ–Ω API —Ç–æ–∫–µ–Ω.\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /language_setup –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏."
            )
            return

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –ø—Ä–∏–≤—ã—á–∫—É —á—Ç–µ–Ω–∏—è
        result = await session.execute(
            select(LanguageHabit).where(
                LanguageHabit.user_id == user_id,
                LanguageHabit.habit_type == "reading",
                LanguageHabit.is_active == True,  # noqa: E712
            )
        )
        habit = result.scalar_one_or_none()

        if not habit or not habit.current_book_id:
            await message.answer(
                "üìö –£ –≤–∞—Å –Ω–µ –≤—ã–±—Ä–∞–Ω–∞ –∫–Ω–∏–≥–∞ –¥–ª—è —á—Ç–µ–Ω–∏—è.\n" "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /choose_book —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –∫–Ω–∏–≥—É.",
                reply_markup=get_reading_keyboard(),
            )
            return

        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —Ç–µ–∫—É—â–∏–π —Ñ—Ä–∞–≥–º–µ–Ω—Ç
            data = await state.get_data()
            cached_fragment = data.get("current_fragment")

            # –ï—Å–ª–∏ –µ—Å—Ç—å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ—Ä–∞–≥–º–µ–Ω—Ç —Å —Ç–µ–º –∂–µ book_id - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ–≥–æ
            if cached_fragment and cached_fragment.get("book_id") == habit.current_book_id:
                await _display_fragment(message, cached_fragment, session, habit, state, user_id)
            else:
                # –ò–Ω–∞—á–µ –ø–æ–ª—É—á–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π —Ñ—Ä–∞–≥–º–µ–Ω—Ç (–ø–µ—Ä–≤—ã–π —Ä–∞–∑ –∏–ª–∏ –Ω–æ–≤–∞—è –∫–Ω–∏–≥–∞)
                # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º 1500 —Å–∏–º–≤–æ–ª–æ–≤, —á—Ç–æ–±—ã –ø–æ—Ç–æ–º –æ–±—Ä–µ–∑–∞—Ç—å –¥–æ ~1000 –ø–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—é
                fragment_data = await api.read_next(
                    book_id=habit.current_book_id,
                    length=1500,
                )

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ state –∫–∞–∫ —Ç–µ–∫—É—â–∏–π
                fragment_data["book_id"] = habit.current_book_id
                await state.update_data(current_fragment=fragment_data)

                await _display_fragment(message, fragment_data, session, habit, state, user_id)

        except APIAuthError:
            await message.answer(
                "‚ùå <b>–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏</b>\n\n"
                "–í–∞—à —Ç–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –∏–ª–∏ –∏—Å—Ç–µ–∫.\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /language_setup –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞."
            )
        except APIConnectionError:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É.\n" "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        except APIError as e:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ API: {e}")
        finally:
            await api.close()


@router.message(Command("choose_book"))
async def cmd_choose_book(message: Message, state: FSMContext):
    """–í—ã–±–æ—Ä –∫–Ω–∏–≥–∏ –¥–ª—è —á—Ç–µ–Ω–∏—è"""
    user_id = message.from_user.id

    async with SessionLocal() as session:
        api = await get_user_language_api(session, user_id)
        if not api:
            await message.answer(
                "üîë <b>–¢—Ä–µ–±—É–µ—Ç—Å—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ API</b>\n\n"
                "–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π —á—Ç–µ–Ω–∏—è –Ω—É–∂–µ–Ω API —Ç–æ–∫–µ–Ω.\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /language_setup –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏."
            )
            return

        try:
            books = await api.get_books()

            if not books:
                await message.answer("üìö –ö–Ω–∏–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
                return

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∫–Ω–∏–≥
            level_counts = {}
            for book in books:
                level = book.get("level", "Unknown")
                level_counts[level] = level_counts.get(level, 0) + 1

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ –∫–Ω–∏–≥ –≤ Markdown
            books_list = []
            for idx, book in enumerate(books, 1):
                level_emoji = {
                    "A1": "üü¢",
                    "A2": "üü¢",
                    "B1": "üü°",
                    "B2": "üü°",
                    "C1": "üî¥",
                    "C2": "üî¥",
                }.get(book.get("level", ""), "üìò")

                # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è MarkdownV2
                title = escape_markdown(book["title"])
                author = escape_markdown(book["author"])
                chapters = book.get("chapters_count", "?")

                books_list.append(
                    f"`{idx:2d}` {level_emoji} *{title}*\n" f"     ‚îî {author} ‚Ä¢ {chapters} –≥–ª–∞–≤"
                )

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            stats_parts = [f"{level}: {count}" for level, count in sorted(level_counts.items())]
            stats_escaped = escape_markdown(", ".join(stats_parts))

            message_text = (
                f"üìö *–í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–∏–≥—É –¥–ª—è —á—Ç–µ–Ω–∏—è*\n\n"
                f"üìä –î–æ—Å—Ç—É–ø–Ω–æ –∫–Ω–∏–≥: {stats_escaped}\n\n"
                f"üü¢ A1\\-A2 \\(–ù–∞—á–∏–Ω–∞—é—â–∏–π\\) \\| "
                f"üü° B1\\-B2 \\(–°—Ä–µ–¥–Ω–∏–π\\) \\| "
                f"üî¥ C1\\-C2 \\(–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π\\)\n\n"
                f"{chr(10).join(books_list)}\n\n"
                f"üí¨ _–ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–Ω–∏–≥–∏ \\(1\\-{len(books)}\\) –∏–ª–∏ /cancel_"
            )

            await message.answer(message_text, parse_mode=ParseMode.MARKDOWN_V2)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ –∫–Ω–∏–≥ –≤ state –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –≤—ã–±–æ—Ä–∞
            await state.update_data(books=books)
            await state.set_state(ReadingStates.choosing_book)

        except APIAuthError:
            await message.answer(
                "‚ùå <b>–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏</b>\n\n"
                "–í–∞—à —Ç–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω.\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /language_setup –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è."
            )
        except APIError as e:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        finally:
            await api.close()


@router.message(ReadingStates.choosing_book, F.text == "/cancel")
async def cancel_book_selection(message: Message, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ –≤—ã–±–æ—Ä–∞ –∫–Ω–∏–≥–∏"""
    await state.clear()
    await message.answer("‚ùå –í—ã–±–æ—Ä –∫–Ω–∏–≥–∏ –æ—Ç–º–µ–Ω–µ–Ω.")


@router.message(ReadingStates.choosing_book)
async def process_book_number(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ –∫–Ω–∏–≥–∏"""
    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–≤–µ–¥–µ–Ω–æ —á–∏—Å–ª–æ
    if not message.text.isdigit():
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–Ω–∏–≥–∏ (—á–∏—Å–ª–æ) –∏–ª–∏ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã")
        return

    book_number = int(message.text)

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–Ω–∏–≥ –∏–∑ state
    data = await state.get_data()
    books = data.get("books", [])

    if not books:
        await message.answer("‚ùå –°–ø–∏—Å–æ–∫ –∫–Ω–∏–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /choose_book –∑–∞–Ω–æ–≤–æ")
        await state.clear()
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –Ω–æ–º–µ—Ä–∞
    if book_number < 1 or book_number > len(books):
        await message.answer(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä. –í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç 1 –¥–æ {len(books)} –∏–ª–∏ /cancel")
        return

    # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–Ω–∏–≥—É (–∏–Ω–¥–µ–∫—Å = –Ω–æ–º–µ—Ä - 1)
    selected_book = books[book_number - 1]
    book_id = selected_book["id"]

    async with SessionLocal() as session:
        api = await get_user_language_api(session, user_id)
        if not api:
            await message.answer("üîë –¢–æ–∫–µ–Ω API –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /language_setup")
            await state.clear()
            return

        try:
            # –ù–∞—á–∏–Ω–∞–µ–º –∫–Ω–∏–≥—É —á–µ—Ä–µ–∑ API
            result = await api.start_book(book_id)
            book_info = result["book"]

            # –°–æ–∑–¥–∞—ë–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–∏–≤—ã—á–∫—É
            habit_result = await session.execute(
                select(LanguageHabit).where(
                    LanguageHabit.user_id == user_id, LanguageHabit.habit_type == "reading"
                )
            )
            habit = habit_result.scalar_one_or_none()

            if not habit:
                habit = LanguageHabit(
                    user_id=user_id, habit_type="reading", name="Daily Reading", daily_goal=500
                )
                session.add(habit)

            habit.current_book_id = book_id
            habit.current_book_title = book_info["title"]
            habit.is_active = True

            await session.commit()

            await message.answer(
                f"‚úÖ <b>–ö–Ω–∏–≥–∞ –≤—ã–±—Ä–∞–Ω–∞:</b>\n\n"
                f"üìñ ¬´{book_info['title']}¬ª\n"
                f"‚úçÔ∏è {book_info['author']}\n"
                f"üìÑ –ì–ª–∞–≤: {book_info['chapters_count']}\n\n"
                f"–ù–∞—á–Ω–∏—Ç–µ —á—Ç–µ–Ω–∏–µ: /read"
            )
            await state.clear()

        except APIAuthError:
            await message.answer("‚ùå –¢–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /language_setup")
            await state.clear()
        except APIError as e:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            await state.clear()
        finally:
            await api.close()


@router.message(Command("reading_progress"))
async def cmd_reading_progress(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å —á—Ç–µ–Ω–∏—è"""
    user_id = message.from_user.id

    async with SessionLocal() as session:
        api = await get_user_language_api(session, user_id)
        if not api:
            await message.answer("üîë –¢—Ä–µ–±—É–µ—Ç—Å—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ API. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /language_setup")
            return

        result = await session.execute(
            select(LanguageHabit).where(
                LanguageHabit.user_id == user_id, LanguageHabit.habit_type == "reading"
            )
        )
        habit = result.scalar_one_or_none()

        if not habit or not habit.current_book_id:
            await message.answer("üìö –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∫–Ω–∏–≥–∏ –¥–ª—è —á—Ç–µ–Ω–∏—è.")
            return

        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å —Å API
            progress_data = await api.get_reading_progress(habit.current_book_id)

            book = progress_data["book"]
            progress = progress_data["progress"]

            # –õ–æ–∫–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å –∑–∞ —Å–µ–≥–æ–¥–Ω—è
            today = datetime.utcnow().date()
            today_progress_result = await session.execute(
                select(LanguageProgress).where(
                    LanguageProgress.habit_id == habit.id,
                    func.date(LanguageProgress.date) == today,
                )
            )
            today_progress = today_progress_result.scalar_one_or_none()

            words_today = today_progress.words_read if today_progress else 0

            message_text = (
                f"üìä <b>–ü—Ä–æ–≥—Ä–µ—Å—Å —á—Ç–µ–Ω–∏—è</b>\n\n"
                f"üìñ –ö–Ω–∏–≥–∞: <b>{book['title']}</b>\n"
                f"‚úçÔ∏è –ê–≤—Ç–æ—Ä: {book['author']}\n"
                f"üìÑ –í—Å–µ–≥–æ –≥–ª–∞–≤: {book['total_chapters']}\n\n"
                f"üìà <b>–û–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å:</b> {progress['overall_progress_pct']:.1f}%\n"
                f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ –≥–ª–∞–≤: {progress['chapters_completed']}\n"
                f"üìç –¢–µ–∫—É—â–∞—è –≥–ª–∞–≤–∞: {progress['current_chapter']}\n"
                f"üîÑ –ü—Ä–æ–≥—Ä–µ—Å—Å –≥–ª–∞–≤—ã: {progress['current_chapter_progress_pct']:.1f}%\n\n"
                f"üìÖ <b>–°–µ–≥–æ–¥–Ω—è:</b>\n"
                f"üìù –ü—Ä–æ—á–∏—Ç–∞–Ω–æ —Å–ª–æ–≤: {words_today} / {habit.daily_goal}\n"
                f"üî• Streak: {habit.current_streak} –¥–Ω–µ–π"
            )

            await message.answer(message_text)

        except APIAuthError:
            await message.answer("‚ùå –¢–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /language_setup")
        except APIError as e:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        finally:
            await api.close()


@router.callback_query(F.data == "read:continue")
async def callback_continue_reading(callback: CallbackQuery, state: FSMContext):
    """–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —á—Ç–µ–Ω–∏–µ - –ø–æ–ª—É—á–∏—Ç—å –°–õ–ï–î–£–Æ–©–ò–ô —Ñ—Ä–∞–≥–º–µ–Ω—Ç"""
    await callback.answer()
    user_id = callback.from_user.id

    async with SessionLocal() as session:
        api = await get_user_language_api(session, user_id)
        if not api:
            await callback.message.answer("üîë –¢–æ–∫–µ–Ω API –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        result = await session.execute(
            select(LanguageHabit).where(
                LanguageHabit.user_id == user_id,
                LanguageHabit.habit_type == "reading",
                LanguageHabit.is_active == True,  # noqa: E712
            )
        )
        habit = result.scalar_one_or_none()

        if not habit or not habit.current_book_id:
            await callback.message.answer("üìö –ö–Ω–∏–≥–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞")
            return

        try:
            # –ü–æ–ª—É—á–∞–µ–º –°–õ–ï–î–£–Æ–©–ò–ô —Ñ—Ä–∞–≥–º–µ–Ω—Ç
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º 1500 —Å–∏–º–≤–æ–ª–æ–≤, —á—Ç–æ–±—ã –æ–±—Ä–µ–∑–∞—Ç—å –¥–æ ~1000 –ø–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—é
            fragment_data = await api.read_next(book_id=habit.current_book_id, length=1500)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ñ—Ä–∞–≥–º–µ–Ω—Ç –≤ –∏—Å—Ç–æ—Ä–∏—é
            data = await state.get_data()
            current = data.get("current_fragment")
            if current:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
                history = data.get("fragment_history", [])
                history.append(current)
                # –•—Ä–∞–Ω–∏–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5
                if len(history) > 5:
                    history = history[-5:]
                await state.update_data(fragment_history=history)

            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —Ñ—Ä–∞–≥–º–µ–Ω—Ç
            fragment_data["book_id"] = habit.current_book_id
            await state.update_data(current_fragment=fragment_data)

            # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ –ë–î
            today = datetime.utcnow().date()
            progress_result = await session.execute(
                select(LanguageProgress).where(
                    LanguageProgress.habit_id == habit.id,
                    func.date(LanguageProgress.date) == today,
                )
            )
            progress = progress_result.scalar_one_or_none()

            if not progress:
                progress = LanguageProgress(
                    habit_id=habit.id,
                    date=datetime.utcnow(),
                    words_read=0,
                    fragments_read=0,
                    lessons_completed=0,
                )
                session.add(progress)

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            if not fragment_data.get("finished"):
                fragment = fragment_data["fragment"]
                progress.words_read = (progress.words_read or 0) + len(fragment["text"].split())
                progress.fragments_read = (progress.fragments_read or 0) + 1

            await session.commit()

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ—Ä–∞–≥–º–µ–Ω—Ç
            await _display_fragment(callback.message, fragment_data, session, habit, state, user_id)

        except APIError as e:
            await callback.message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        finally:
            await api.close()


@router.callback_query(F.data == "read:back")
async def callback_back_reading(callback: CallbackQuery, state: FSMContext):
    """–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —Ñ—Ä–∞–≥–º–µ–Ω—Ç—É"""
    await callback.answer()
    user_id = callback.from_user.id

    async with SessionLocal() as session:
        result = await session.execute(
            select(LanguageHabit).where(
                LanguageHabit.user_id == user_id, LanguageHabit.habit_type == "reading"
            )
        )
        habit = result.scalar_one_or_none()

        if not habit:
            await callback.message.answer("üìö –ö–Ω–∏–≥–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞")
            return

        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤
        data = await state.get_data()
        history = data.get("fragment_history", [])

        if not history:
            await callback.answer("–í—ã —É–∂–µ –≤ –Ω–∞—á–∞–ª–µ!", show_alert=True)
            return

        # –ë–µ—Ä—ë–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏
        previous_fragment = history.pop()

        # –û–±–Ω–æ–≤–ª—è–µ–º state
        await state.update_data(current_fragment=previous_fragment, fragment_history=history)

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ñ—Ä–∞–≥–º–µ–Ω—Ç
        await _display_fragment(callback.message, previous_fragment, session, habit, state, user_id)


@router.callback_query(F.data == "read:progress")
async def callback_show_progress(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å (–∫–Ω–æ–ø–∫–∞)"""
    await callback.answer()
    await cmd_reading_progress(callback.message)


@router.callback_query(F.data == "choose_book")
async def callback_choose_book(callback: CallbackQuery, state: FSMContext):
    """–ö–Ω–æ–ø–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–Ω–∏–≥–∏"""
    await callback.answer()
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≤—ã–∑–æ–≤–∞ –∫–æ–º–∞–Ω–¥—ã
    await cmd_choose_book(callback.message, state)


@router.callback_query(F.data == "reading_progress")
async def callback_reading_progress(callback: CallbackQuery):
    """–ö–Ω–æ–ø–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —á—Ç–µ–Ω–∏—è"""
    await callback.answer()
    await cmd_reading_progress(callback.message)


# ===== COMPREHENSION QUESTIONS =====


@router.message(Command("answer_questions"))
async def cmd_answer_questions(message: Message, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –Ω–∞ –ø–æ–Ω–∏–º–∞–Ω–∏–µ"""
    user_id = message.from_user.id

    async with SessionLocal() as session:
        # Get reading habit
        result = await session.execute(
            select(LanguageHabit).where(
                LanguageHabit.user_id == user_id,
                LanguageHabit.habit_type == "reading",
                LanguageHabit.is_active == True,  # noqa: E712
            )
        )
        habit = result.scalar_one_or_none()

        if not habit:
            await message.answer("üìö –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø—Ä–∏–≤—ã—á–∫–∏ —á—Ç–µ–Ω–∏—è")
            return

        # Get today's progress
        today = datetime.utcnow().date()
        progress_result = await session.execute(
            select(LanguageProgress).where(
                LanguageProgress.habit_id == habit.id,
                func.date(LanguageProgress.date) == today,
            )
        )
        progress = progress_result.scalar_one_or_none()

        # Check if questions are available
        if not progress or not progress.questions_sent:
            await message.answer(
                "‚ùå –í–æ–ø—Ä–æ—Å—ã –µ—â—ë –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã.\n\n" "–í–æ–ø—Ä–æ—Å—ã –ø—Ä–∏—Ö–æ–¥—è—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–µ—á–µ—Ä–æ–º –ø–æ—Å–ª–µ —á—Ç–µ–Ω–∏—è."
            )
            return

        if progress.questions_answered:
            await message.answer(
                f"‚úÖ –í—ã —É–∂–µ –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã —Å–µ–≥–æ–¥–Ω—è!\n\n"
                f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {progress.questions_correct}/{progress.questions_total}"
            )
            return

        # Get questions from extra_data
        questions = progress.extra_data.get("questions", []) if progress.extra_data else []
        if not questions:
            await message.answer("‚ùå –í–æ–ø—Ä–æ—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return

        # Save questions to state and start FSM
        await state.update_data(questions=questions, current_question=0, answers=[], progress_id=progress.id)
        await state.set_state(ReadingStates.answering_questions)

        # Show first question
        await _show_question(message, questions[0], 1, len(questions))


async def _show_question(message: Message, question: dict, number: int, total: int):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤–æ–ø—Ä–æ—Å —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤"""
    question_text = question.get("question", "")
    options = question.get("options", [])

    message_text = f"‚ùì <b>–í–æ–ø—Ä–æ—Å {number}/{total}</b>\n\n" f"{question_text}\n\n"

    for idx, option in enumerate(options, 1):
        message_text += f"{idx}. {option}\n"

    message_text += "\nüí¨ <i>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä –æ—Ç–≤–µ—Ç–∞ (1-4) –∏–ª–∏ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã</i>"

    await message.answer(message_text)


@router.message(ReadingStates.answering_questions, Command("cancel"))
async def cancel_questions(message: Message, state: FSMContext):
    """–û—Ç–º–µ–Ω–∏—Ç—å –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã"""
    await state.clear()
    await message.answer("‚ùå –û—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ—Ç–º–µ–Ω–µ–Ω—ã")


@router.message(ReadingStates.answering_questions)
async def process_answer(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –≤–æ–ø—Ä–æ—Å"""
    text = message.text.strip()

    # Validate input
    if not text.isdigit():
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –æ—Ç–≤–µ—Ç–∞ (1-4)")
        return

    answer_idx = int(text) - 1

    data = await state.get_data()
    questions = data.get("questions", [])
    current_idx = data.get("current_question", 0)
    answers = data.get("answers", [])

    if current_idx >= len(questions):
        await message.answer("‚ùå –í—Å–µ –≤–æ–ø—Ä–æ—Å—ã —É–∂–µ –æ—Ç–≤–µ—á–µ–Ω—ã")
        await state.clear()
        return

    current_question = questions[current_idx]
    options = current_question.get("options", [])

    # Validate answer index
    if answer_idx < 0 or answer_idx >= len(options):
        await message.answer(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä. –í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç 1 –¥–æ {len(options)}")
        return

    # Check if answer is correct
    correct_idx = current_question.get("correct_answer", 0)
    is_correct = answer_idx == correct_idx

    # Save answer
    answers.append(
        {
            "question_idx": current_idx,
            "user_answer": answer_idx,
            "correct_answer": correct_idx,
            "is_correct": is_correct,
        }
    )

    # Show feedback
    if is_correct:
        await message.answer("‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!")
    else:
        correct_option = options[correct_idx]
        await message.answer(f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ\n\n" f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_option}")

    # Move to next question
    next_idx = current_idx + 1

    if next_idx < len(questions):
        # More questions remain
        await state.update_data(current_question=next_idx, answers=answers)
        await _show_question(message, questions[next_idx], next_idx + 1, len(questions))
    else:
        # All questions answered
        correct_count = sum(1 for a in answers if a["is_correct"])
        total_count = len(answers)

        # Update progress in database
        async with SessionLocal() as session:
            progress_id = data.get("progress_id")
            result = await session.execute(select(LanguageProgress).where(LanguageProgress.id == progress_id))
            progress = result.scalar_one_or_none()

            if progress:
                progress.questions_answered = True
                progress.questions_correct = correct_count
                progress.questions_total = total_count

                # Store detailed answers
                if progress.extra_data is None:
                    progress.extra_data = {}
                progress.extra_data["user_answers"] = answers

                await session.commit()

        # Show final results
        percentage = (correct_count / total_count * 100) if total_count > 0 else 0

        result_emoji = "üéâ" if percentage >= 80 else "üëç" if percentage >= 60 else "üìö"

        if percentage >= 80:
            result_text = "–û—Ç–ª–∏—á–Ω–æ!"
        elif percentage >= 60:
            result_text = "–•–æ—Ä–æ—à–æ!"
        else:
            result_text = "–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –ø—Ä–∞–∫—Ç–∏–∫–æ–≤–∞—Ç—å—Å—è!"

        await message.answer(
            f"{result_emoji} <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã</b>\n\n"
            f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {correct_count}/{total_count}\n"
            f"–ü—Ä–æ—Ü–µ–Ω—Ç: {percentage:.0f}%\n\n"
            f"{result_text}"
        )

        await state.clear()
