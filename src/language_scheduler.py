"""Language learning reminder scheduler jobs."""

from datetime import datetime, timedelta
from zoneinfo import ZoneInfo

from api.language_api import get_user_language_api
from apscheduler.triggers.cron import CronTrigger
from audio_service import audio_service
from config import logger
from db import LanguageHabit, LanguageProgress, SessionLocal, User, UserLanguageSettings
from sqlalchemy import func, select


class LanguageReminderService:
    """–£–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏ –¥–ª—è —è–∑—ã–∫–æ–≤—ã—Ö –ø—Ä–∏–≤—ã—á–µ–∫."""

    def __init__(self, bot, scheduler):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–µ—Ä–≤–∏—Å —Å —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–º –±–æ—Ç–∞ –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞."""
        self.bot = bot
        self.scheduler = scheduler

    async def schedule_reading_reminder(self, user_id: int, reminder_time: str):
        """
        –ü–ª–∞–Ω–∏—Ä—É–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ —á—Ç–µ–Ω–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            reminder_time: –í—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ "HH:MM"
        """
        async with SessionLocal() as session:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è timezone
            result = await session.execute(select(User).where(User.user_id == user_id))
            user = result.scalar_one_or_none()
            if not user:
                logger.warning(f"User {user_id} not found for reading reminder scheduling")
                return

            job_id = f"language_reading_{user_id}"

            # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ, –µ—Å–ª–∏ –µ—Å—Ç—å
            if self.scheduler.get_job(job_id):
                self.scheduler.remove_job(job_id)

            # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è
            hour, minute = map(int, reminder_time.split(":"))

            # –°–æ–∑–¥–∞—ë–º —Ç—Ä–∏–≥–≥–µ—Ä —Å —É—á—ë—Ç–æ–º —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            tz = ZoneInfo(user.tz) if user.tz else ZoneInfo("UTC")
            trigger = CronTrigger(hour=hour, minute=minute, timezone=tz)

            self.scheduler.add_job(
                self._send_reading_reminder,
                trigger=trigger,
                id=job_id,
                args=[user_id],
                replace_existing=True,
            )

            logger.info(f"Scheduled reading reminder for user {user_id} at {reminder_time} {user.tz}")

    async def _send_reading_reminder(self, user_id: int):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ —á—Ç–µ–Ω–∏–∏."""
        async with SessionLocal() as session:
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–≤—ã—á–∫—É —á—Ç–µ–Ω–∏—è
            result = await session.execute(
                select(LanguageHabit).where(
                    LanguageHabit.user_id == user_id,
                    LanguageHabit.habit_type == "reading",
                    LanguageHabit.is_active == True,  # noqa: E712
                )
            )
            habit = result.scalar_one_or_none()

            if not habit:
                return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∑–∞ —Å–µ–≥–æ–¥–Ω—è
            today = datetime.utcnow().date()
            progress_result = await session.execute(
                select(LanguageProgress).where(
                    LanguageProgress.habit_id == habit.id,
                    func.date(LanguageProgress.date) == today,
                )
            )
            progress = progress_result.scalar_one_or_none()

            words_today = progress.words_read if progress else 0
            words_left = max(0, habit.daily_goal - words_today)

            if words_left == 0:
                # –¶–µ–ª—å —É–∂–µ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞
                message = f"üéâ –û—Ç–ª–∏—á–Ω–æ! –í—ã —É–∂–µ –ø—Ä–æ—á–∏—Ç–∞–ª–∏ {words_today} —Å–ª–æ–≤ —Å–µ–≥–æ–¥–Ω—è!\n" f"–¶–µ–ª—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∞! ‚úÖ"
                try:
                    await self.bot.send_message(user_id, message)
                    logger.info(f"Sent reading completion message to user {user_id}")
                except Exception as e:
                    logger.error(f"Failed to send reading completion to user {user_id}: {e}")
                return

            # –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
            message_text = (
                f"üìö <b>–í—Ä–µ–º—è –¥–ª—è —á—Ç–µ–Ω–∏—è!</b>\n\n"
                f"üìñ –ö–Ω–∏–≥–∞: <i>{habit.current_book_title or '–ù–µ –≤—ã–±—Ä–∞–Ω–∞'}</i>\n"
                f"üéØ –¶–µ–ª—å: {habit.daily_goal} —Å–ª–æ–≤ –≤ –¥–µ–Ω—å\n"
                f"‚úÖ –ü—Ä–æ—á–∏—Ç–∞–Ω–æ: {words_today} —Å–ª–æ–≤\n"
                f"üìù –û—Å—Ç–∞–ª–æ—Å—å: {words_left} —Å–ª–æ–≤ (~{words_left // 200} –º–∏–Ω)\n\n"
            )

            # Check if audio was sent earlier
            if progress and progress.audio_sent:
                message_text += "üéß –í—ã —É–∂–µ –ø—Ä–æ—Å–ª—É—à–∞–ª–∏ –∞—É–¥–∏–æ.\n"

            if habit.current_book_id:
                message_text += "\n–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —á—Ç–µ–Ω–∏–µ: /read"
            else:
                message_text += "\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–∏–≥—É: /choose_book"

            try:
                await self.bot.send_message(user_id, message_text)

                # Mark text as sent for audio workflow tracking
                if progress:
                    progress.text_sent = True
                    progress.text_sent_at = datetime.utcnow()
                    await session.commit()

                logger.info(f"Sent reading reminder to user {user_id}")
            except Exception as e:
                logger.error(f"Failed to send reading reminder to user {user_id}: {e}")

    async def check_reading_streaks(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç streak –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è —Ä–∞–∑ –≤ –¥–µ–Ω—å)."""
        async with SessionLocal() as session:
            result = await session.execute(
                select(LanguageHabit).where(
                    LanguageHabit.habit_type == "reading",
                    LanguageHabit.is_active == True,  # noqa: E712
                )
            )
            habits = result.scalars().all()

            for habit in habits:
                today = datetime.utcnow().date()
                yesterday = today - timedelta(days=1)

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—á–µ—Ä–∞—à–Ω–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å
                yesterday_result = await session.execute(
                    select(LanguageProgress).where(
                        LanguageProgress.habit_id == habit.id,
                        func.date(LanguageProgress.date) == yesterday,
                    )
                )
                yesterday_progress = yesterday_result.scalar_one_or_none()

                if yesterday_progress and yesterday_progress.words_read >= habit.daily_goal:
                    # Streak –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è
                    habit.current_streak += 1
                    habit.longest_streak = max(habit.longest_streak, habit.current_streak)
                    habit.last_completed = datetime.utcnow()
                else:
                    # Streak –ø—Ä–µ—Ä–≤–∞–Ω
                    if habit.current_streak > 0:
                        try:
                            await self.bot.send_message(
                                habit.user_id,
                                f"‚ùå –í–∞—à streak –ø—Ä–µ—Ä–≤–∞–Ω!\n"
                                f"–ë—ã–ª–æ: {habit.current_streak} –¥–Ω–µ–π\n"
                                f"–ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å–µ–≥–æ–¥–Ω—è!",
                            )
                        except Exception as e:
                            logger.error(f"Failed to send streak broken message: {e}")
                    habit.current_streak = 0

            await session.commit()
            logger.info(f"Checked reading streaks for {len(habits)} habits")

    def remove_language_jobs(self, user_id: int):
        """–£–¥–∞–ª—è–µ—Ç –≤—Å–µ —è–∑—ã–∫–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞."""
        job_ids = [
            f"language_reading_{user_id}",
            f"language_audio_{user_id}",
            f"language_questions_{user_id}",
        ]
        for job_id in job_ids:
            if self.scheduler.get_job(job_id):
                self.scheduler.remove_job(job_id)
                logger.info(f"Removed job {job_id}")

    # ===== AUDIO WORKFLOW (3-part: audio ‚Üí text ‚Üí questions) =====

    async def schedule_audio_workflow(
        self, user_id: int, audio_time: str, reading_time: str, questions_time: str
    ):
        """
        –ü–ª–∞–Ω–∏—Ä—É–µ—Ç 3-—ç—Ç–∞–ø–Ω—ã–π —Ä–∞–±–æ—á–∏–π –ø—Ä–æ—Ü–µ—Å—Å –æ–±—É—á–µ–Ω–∏—è:
        1. –£—Ç—Ä–æ (audio_time): –û—Ç–ø—Ä–∞–≤–∫–∞ –∞—É–¥–∏–æ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞ –¥–ª—è –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è
        2. –î–µ–Ω—å (reading_time): –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —á—Ç–µ–Ω–∏—è
        3. –í–µ—á–µ—Ä (questions_time): –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ –Ω–∞ –ø–æ–Ω–∏–º–∞–Ω–∏–µ

        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            audio_time: –í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞—É–¥–∏–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "08:00")
            reading_time: –í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ–∫—Å—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "10:00")
            questions_time: –í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "20:00")
        """
        async with SessionLocal() as session:
            result = await session.execute(select(User).where(User.user_id == user_id))
            user = result.scalar_one_or_none()
            if not user:
                logger.warning(f"User {user_id} not found for audio workflow scheduling")
                return

            tz = ZoneInfo(user.tz) if user.tz else ZoneInfo("UTC")

            # Remove old jobs
            self.remove_language_jobs(user_id)

            # Schedule audio (morning)
            audio_hour, audio_minute = map(int, audio_time.split(":"))
            audio_trigger = CronTrigger(hour=audio_hour, minute=audio_minute, timezone=tz)
            self.scheduler.add_job(
                self._send_audio_fragment,
                trigger=audio_trigger,
                id=f"language_audio_{user_id}",
                args=[user_id],
                replace_existing=True,
            )
            logger.info(f"Scheduled audio for user {user_id} at {audio_time} {user.tz}")

            # Schedule reading (midday)
            reading_hour, reading_minute = map(int, reading_time.split(":"))
            reading_trigger = CronTrigger(hour=reading_hour, minute=reading_minute, timezone=tz)
            self.scheduler.add_job(
                self._send_reading_reminder,
                trigger=reading_trigger,
                id=f"language_reading_{user_id}",
                args=[user_id],
                replace_existing=True,
            )
            logger.info(f"Scheduled reading for user {user_id} at {reading_time} {user.tz}")

            # Schedule questions (evening)
            questions_hour, questions_minute = map(int, questions_time.split(":"))
            questions_trigger = CronTrigger(hour=questions_hour, minute=questions_minute, timezone=tz)
            self.scheduler.add_job(
                self._send_comprehension_questions,
                trigger=questions_trigger,
                id=f"language_questions_{user_id}",
                args=[user_id],
                replace_existing=True,
            )
            logger.info(f"Scheduled questions for user {user_id} at {questions_time} {user.tz}")

    async def _send_audio_fragment(self, user_id: int):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∞—É–¥–∏–æ —Ñ—Ä–∞–≥–º–µ–Ω—Ç –¥–ª—è –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è (—É—Ç—Ä–æ, –∑–∞ 1-2 —á–∞—Å–∞ –¥–æ —á—Ç–µ–Ω–∏—è)."""
        async with SessionLocal() as session:
            # Get reading habit
            habit_result = await session.execute(
                select(LanguageHabit).where(
                    LanguageHabit.user_id == user_id,
                    LanguageHabit.habit_type == "reading",
                    LanguageHabit.is_active == True,  # noqa: E712
                )
            )
            habit = habit_result.scalar_one_or_none()
            if not habit or not habit.current_book_id:
                logger.info(f"No active reading habit for user {user_id}, skipping audio")
                return

            # Get settings
            settings_result = await session.execute(
                select(UserLanguageSettings).where(UserLanguageSettings.user_id == user_id)
            )
            settings = settings_result.scalar_one_or_none()
            if not settings or not settings.audio_enabled:
                logger.info(f"Audio disabled for user {user_id}")
                return

            # Get API client
            api = await get_user_language_api(session, user_id)
            if not api:
                logger.warning(f"No API token for user {user_id}")
                await self.bot.send_message(user_id, "‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω API —Ç–æ–∫–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /language_setup")
                return

            # Get or create today's progress
            today = datetime.utcnow().date()
            progress_result = await session.execute(
                select(LanguageProgress).where(
                    LanguageProgress.habit_id == habit.id,
                    func.date(LanguageProgress.date) == today,
                )
            )
            progress = progress_result.scalar_one_or_none()

            # Check if audio already sent today
            if progress and progress.audio_sent:
                logger.info(f"Audio already sent today for user {user_id}")
                return

            try:
                # Fetch next fragment
                target_length = settings.preferred_fragment_length if settings else 1000
                fragment_data = await api.read_next(book_id=habit.current_book_id, length=target_length)

                fragment = fragment_data.get("fragment", {})
                text = fragment.get("text", "").replace("\\n", "\n")

                if not text:
                    logger.error(f"Empty fragment text for user {user_id}")
                    return

                # Generate audio
                book = fragment_data.get("book", {})
                chapter = fragment_data.get("chapter", {})

                audio_buffer = await audio_service.generate_audio(text, language="en")

                if audio_buffer:
                    # Send audio message
                    caption = (
                        f"üéß <b>–ê—É–¥–∏–æ –¥–ª—è –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è</b>\n\n"
                        f"üìñ {book.get('title', '–ö–Ω–∏–≥–∞')}\n"
                        f"–ì–ª–∞–≤–∞ {chapter.get('number', '?')}: {chapter.get('title', '–ì–ª–∞–≤–∞')}\n\n"
                        f"–ü—Ä–æ—Å–ª—É—à–∞–π—Ç–µ —ç—Ç–æ—Ç —Ñ—Ä–∞–≥–º–µ–Ω—Ç, —á—Ç–æ–±—ã –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ —á—Ç–µ–Ω–∏—é.\n"
                        f"üìù –¢–µ–∫—Å—Ç –¥–ª—è —á—Ç–µ–Ω–∏—è –ø—Ä–∏–¥—ë—Ç –ø–æ–∑–∂–µ."
                    )

                    await self.bot.send_voice(user_id, voice=audio_buffer, caption=caption)
                else:
                    # Fallback: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –±–µ–∑ –∞—É–¥–∏–æ
                    logger.warning(f"Audio generation failed for user {user_id}, sending text-only preview")

                    # –û–±—Ä–µ–∑–∞–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è preview
                    preview_text = text[:500] + "..." if len(text) > 500 else text

                    fallback_message = (
                        f"üìñ <b>–¢–µ–∫—Å—Ç –¥–ª—è –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è</b>\n\n"
                        f"üìñ {book.get('title', '–ö–Ω–∏–≥–∞')}\n"
                        f"–ì–ª–∞–≤–∞ {chapter.get('number', '?')}: {chapter.get('title', '–ì–ª–∞–≤–∞')}\n\n"
                        f"‚ö†Ô∏è <i>–ê—É–¥–∏–æ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ. "
                        f"–í–æ—Ç —Ç–µ–∫—Å—Ç –¥–ª—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω–∏—è:</i>\n\n"
                        f"{preview_text}\n\n"
                        f"üìù –ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è —á—Ç–µ–Ω–∏—è –ø—Ä–∏–¥—ë—Ç –ø–æ–∑–∂–µ."
                    )

                    await self.bot.send_message(user_id, fallback_message)

                # Update progress
                if not progress:
                    progress = LanguageProgress(
                        habit_id=habit.id,
                        date=datetime.utcnow(),
                        words_read=0,
                        fragments_read=0,
                        lessons_completed=0,
                        audio_sent=False,
                        text_sent=False,
                        questions_sent=False,
                        questions_answered=False,
                        questions_correct=0,
                        questions_total=0,
                    )
                    session.add(progress)

                progress.audio_sent = True
                progress.audio_sent_at = datetime.utcnow()
                # Store fragment for later use
                if progress.extra_data is None:
                    progress.extra_data = {}
                progress.extra_data["pending_fragment"] = fragment_data

                await session.commit()
                logger.info(f"Sent audio fragment to user {user_id}")

            except Exception as e:
                logger.error(f"Failed to send audio to user {user_id}: {e}")

    async def _send_comprehension_questions(self, user_id: int):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤–æ–ø—Ä–æ—Å—ã –Ω–∞ –ø–æ–Ω–∏–º–∞–Ω–∏–µ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–≥–æ (–≤–µ—á–µ—Ä)."""
        async with SessionLocal() as session:
            # Get reading habit
            habit_result = await session.execute(
                select(LanguageHabit).where(
                    LanguageHabit.user_id == user_id,
                    LanguageHabit.habit_type == "reading",
                    LanguageHabit.is_active == True,  # noqa: E712
                )
            )
            habit = habit_result.scalar_one_or_none()
            if not habit or not habit.current_book_id:
                return

            # Get today's progress
            today = datetime.utcnow().date()
            progress_result = await session.execute(
                select(LanguageProgress).where(
                    LanguageProgress.habit_id == habit.id,
                    func.date(LanguageProgress.date) == today,
                )
            )
            progress = progress_result.scalar_one_or_none()

            # Check if text was sent and questions not yet sent
            if not progress or not progress.text_sent:
                logger.info(f"Text not sent yet for user {user_id}, skipping questions")
                return

            if progress.questions_sent:
                logger.info(f"Questions already sent today for user {user_id}")
                return

            # Get API client
            api = await get_user_language_api(session, user_id)
            if not api:
                return

            try:
                # Get fragment text from extra_data
                fragment_text = None
                if progress.extra_data and "pending_fragment" in progress.extra_data:
                    fragment_data = progress.extra_data["pending_fragment"]
                    fragment = fragment_data.get("fragment", {})
                    fragment_text = fragment.get("text", "")

                # Fetch comprehension questions
                questions_data = await api.get_comprehension_questions(
                    book_id=habit.current_book_id, fragment_text=fragment_text, question_count=3
                )

                questions = questions_data.get("questions", [])
                if not questions:
                    logger.warning(f"No questions returned for user {user_id}")
                    return

                # Send questions (we'll implement the handler later)
                message_text = (
                    "‚ùì <b>–í–æ–ø—Ä–æ—Å—ã –Ω–∞ –ø–æ–Ω–∏–º–∞–Ω–∏–µ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–≥–æ</b>\n\n"
                    "–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –ø–æ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–º—É —Ñ—Ä–∞–≥–º–µ–Ω—Ç—É:\n\n"
                )

                for idx, q in enumerate(questions, 1):
                    message_text += f"{idx}. {q.get('question', '')}\n"

                message_text += "\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /answer_questions –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤."

                await self.bot.send_message(user_id, message_text)

                # Update progress
                progress.questions_sent = True
                progress.questions_sent_at = datetime.utcnow()
                progress.questions_total = len(questions)

                # Store questions for later checking
                if progress.extra_data is None:
                    progress.extra_data = {}
                progress.extra_data["questions"] = questions

                await session.commit()
                logger.info(f"Sent comprehension questions to user {user_id}")

            except Exception as e:
                logger.error(f"Failed to send questions to user {user_id}: {e}")
