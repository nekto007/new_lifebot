# src/utils/validators.py

import html
import re
from datetime import datetime, time


def escape_html(text: str) -> str:
    """
    –≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç HTML —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.

    Args:
        text: –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç

    Returns:
        –¢–µ–∫—Å—Ç —Å —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ HTML —Å–∏–º–≤–æ–ª–∞–º–∏
    """
    if not text:
        return ""
    return html.escape(text, quote=True)


def validate_time_format(time_str: str) -> tuple[bool, str | None]:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ HH:MM —Å –ø–æ–¥—Ä–æ–±–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π.

    Args:
        time_str: –°—Ç—Ä–æ–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏

    Returns:
        Tuple (is_valid, error_message)
    """
    if not time_str:
        return False, "–í—Ä–µ–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º"

    pattern = r"^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$"
    if not re.match(pattern, time_str):
        return False, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ HH:MM (–Ω–∞–ø—Ä–∏–º–µ—Ä, 08:00)"

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –ø–∞—Ä—Å–∏–º –≤—Ä–µ–º—è
    try:
        parts = time_str.split(":")
        hour = int(parts[0])
        minute = int(parts[1])

        if not (0 <= hour <= 23):
            return False, "–ß–∞—Å—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Ç 0 –¥–æ 23"

        if not (0 <= minute <= 59):
            return False, "–ú–∏–Ω—É—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Ç 0 –¥–æ 59"

        return True, None

    except (ValueError, IndexError):
        return False, "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –≤—Ä–µ–º—è"


def validate_time_sequence(
    audio_time: str, reading_time: str, questions_time: str
) -> tuple[bool, str | None]:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ª–æ–≥–∏—á–µ—Å–∫—É—é –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤—Ä–µ–º–µ–Ω: audio < reading < questions.

    Args:
        audio_time: –í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞—É–¥–∏–æ (HH:MM)
        reading_time: –í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ–∫—Å—Ç–∞ (HH:MM)
        questions_time: –í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ (HH:MM)

    Returns:
        Tuple (is_valid, error_message)
    """
    try:
        audio_t = datetime.strptime(audio_time, "%H:%M").time()
        reading_t = datetime.strptime(reading_time, "%H:%M").time()
        questions_t = datetime.strptime(questions_time, "%H:%M").time()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        if not (audio_t < reading_t < questions_t):
            return (
                False,
                "‚ö†Ô∏è –í—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ –∏–¥—Ç–∏ –ø–æ –ø–æ—Ä—è–¥–∫—É:\n"
                "–ê—É–¥–∏–æ ‚Üí –ß—Ç–µ–Ω–∏–µ ‚Üí –í–æ–ø—Ä–æ—Å—ã\n\n"
                f"–¢–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è:\n"
                f"üéß –ê—É–¥–∏–æ: {audio_time}\n"
                f"üìñ –ß—Ç–µ–Ω–∏–µ: {reading_time}\n"
                f"‚ùì –í–æ–ø—Ä–æ—Å—ã: {questions_time}",
            )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—É–º–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã (—Ö–æ—Ç—è –±—ã 30 –º–∏–Ω—É—Ç –º–µ–∂–¥—É —ç—Ç–∞–ø–∞–º–∏)
        def time_diff_minutes(t1: time, t2: time) -> int:
            """–†–∞–∑–Ω–∏—Ü–∞ –º–µ–∂–¥—É –¥–≤—É–º—è –≤—Ä–µ–º–µ–Ω–∞–º–∏ –≤ –º–∏–Ω—É—Ç–∞—Ö"""
            dt1 = datetime.combine(datetime.today(), t1)
            dt2 = datetime.combine(datetime.today(), t2)
            return int((dt2 - dt1).total_seconds() / 60)

        audio_to_reading = time_diff_minutes(audio_t, reading_t)
        reading_to_questions = time_diff_minutes(reading_t, questions_t)

        if audio_to_reading < 30:
            return (
                False,
                f"‚ö†Ô∏è –ú–µ–∂–¥—É –∞—É–¥–∏–æ –∏ —á—Ç–µ–Ω–∏–µ–º –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–∏–Ω–∏–º—É–º 30 –º–∏–Ω—É—Ç.\n"
                f"–°–µ–π—á–∞—Å: {audio_to_reading} –º–∏–Ω—É—Ç",
            )

        if reading_to_questions < 30:
            return (
                False,
                f"‚ö†Ô∏è –ú–µ–∂–¥—É —á—Ç–µ–Ω–∏–µ–º –∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–∏–Ω–∏–º—É–º 30 –º–∏–Ω—É—Ç.\n"
                f"–°–µ–π—á–∞—Å: {reading_to_questions} –º–∏–Ω—É—Ç",
            )

        return True, None

    except ValueError:
        return False, "–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤—Ä–µ–º–µ–Ω–∏"


def sanitize_text_input(text: str, max_length: int = 5000) -> str:
    """
    –û—á–∏—â–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤.

    Args:
        text: –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç
        max_length: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞

    Returns:
        –û—á–∏—â–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
    """
    if not text:
        return ""

    # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
    text = text.strip()

    # –û–±—Ä–µ–∑–∞–µ–º –¥–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –¥–ª–∏–Ω—ã
    if len(text) > max_length:
        text = text[:max_length]

    return text


def validate_api_token(token: str) -> tuple[bool, str | None]:
    """
    –ë–∞–∑–æ–≤–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è API —Ç–æ–∫–µ–Ω–∞.

    Args:
        token: API —Ç–æ–∫–µ–Ω

    Returns:
        Tuple (is_valid, error_message)
    """
    if not token:
        return False, "–¢–æ–∫–µ–Ω –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º"

    # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã
    token = token.strip()

    # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Ç–æ–∫–µ–Ω–∞ (–æ–±—ã—á–Ω–æ —Ç–æ–∫–µ–Ω—ã –¥–ª–∏–Ω–Ω–µ–µ)
    if len(token) < 20:
        return False, "–¢–æ–∫–µ–Ω —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–ª–∏ –µ–≥–æ –ø–æ–ª–Ω–æ—Å—Ç—å—é"

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–æ–∫–µ–Ω –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
    # (–æ–±—ã—á–Ω–æ —Ç–æ–∫–µ–Ω—ã - —ç—Ç–æ hex, base64 –∏–ª–∏ alphanumeric)
    if not re.match(r"^[A-Za-z0-9_\-\.=]+$", token):
        return (
            False,
            "–¢–æ–∫–µ–Ω —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã. " "–¢–æ–∫–µ–Ω—ã –æ–±—ã—á–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, –∏ _-.",
        )

    return True, None
