"""–£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ—Ä–∞–∑–∞–º–∏, —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞–º–∏."""

import json
import random
from pathlib import Path
from typing import Any


def load_phrases(lang: str = "ru") -> dict[str, list[str]]:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ—Ä–∞–∑—ã –∏–∑ JSON —Ñ–∞–π–ª–∞ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞."""
    phrases_path = Path(__file__).parent.parent.parent / "locales" / f"phrases_{lang}.json"

    if not phrases_path.exists():
        # Fallback to Russian if language not found
        phrases_path = Path(__file__).parent.parent.parent / "locales" / "phrases_ru.json"

    with open(phrases_path, encoding="utf-8") as f:
        return json.load(f)


def get_phrase(key: str, lang: str = "ru", **kwargs: Any) -> str:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—É—é —Ñ—Ä–∞–∑—É –ø–æ –∫–ª—é—á—É –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –µ—ë —Å –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏.

    Args:
        key: –ö–ª—é—á —Ñ—Ä–∞–∑—ã –≤ JSON
        lang: –Ø–∑—ã–∫ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 'ru')
        **kwargs: –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (title, date, first_name –∏ —Ç.–¥.)

    Returns:
        –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ñ—Ä–∞–∑–∞

    Example:
        >>> get_phrase("habit_done", title="–ß—Ç–µ–Ω–∏–µ", date="25.10.2025", emoji="üî•")
        "–û—Ç–ª–∏—á–Ω–æ, –∑–∞—á—ë–ª ¬´–ß—Ç–µ–Ω–∏–µ¬ª –∑–∞ 25.10.2025 üî•"
    """
    phrases = load_phrases(lang)

    if key not in phrases:
        return f"[Missing phrase: {key}]"

    phrase_list = phrases[key]
    selected_phrase = random.choice(phrase_list)

    return selected_phrase.format(**kwargs)


def make_progress_bar(current: int, total: int, length: int = 5) -> str:
    """
    –°–æ–∑–¥–∞—ë—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä.

    Args:
        current: –¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        total: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        length: –î–ª–∏–Ω–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞ (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤)

    Returns:
        –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∫–∏

    Example:
        >>> make_progress_bar(3, 5)
        "[‚ñ†‚ñ†‚ñ†‚ñ°‚ñ°] 3/5"
        >>> make_progress_bar(4, 5, length=10)
        "[‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ°‚ñ°] 4/5"
    """
    if total == 0:
        filled = 0
    else:
        filled = int((current / total) * length)

    empty = length - filled

    bar = "‚ñ†" * filled + "‚ñ°" * empty

    return f"[{bar}] {current}/{total}"


def format_percent(value: float) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç, –æ–∫—Ä—É–≥–ª—è—è –¥–æ —Ü–µ–ª–æ–≥–æ —á–∏—Å–ª–∞.

    Args:
        value: –ó–Ω–∞—á–µ–Ω–∏–µ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö (0-100)

    Returns:
        –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞

    Example:
        >>> format_percent(87.5)
        "88%"
        >>> format_percent(100.0)
        "100%"
    """
    return f"{round(value)}%"


def format_date(date_obj, format_str: str = "DD.MM.YYYY") -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞—Ç—É —Å–æ–≥–ª–∞—Å–Ω–æ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏.

    Args:
        date_obj: –û–±—ä–µ–∫—Ç datetime.date
        format_str: –§–æ—Ä–º–∞—Ç ('DD.MM.YYYY' –¥–ª—è —Ç–µ–∫—Å—Ç–∞, 'YYYYMMDD' –¥–ª—è callback_data)

    Returns:
        –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –¥–∞—Ç–∞

    Example:
        >>> from datetime import date
        >>> format_date(date(2025, 10, 25))
        "25.10.2025"
        >>> format_date(date(2025, 10, 25), "YYYYMMDD")
        "20251025"
    """
    if format_str == "DD.MM.YYYY":
        return date_obj.strftime("%d.%m.%Y")
    elif format_str == "YYYYMMDD":
        return date_obj.strftime("%Y%m%d")
    else:
        return str(date_obj)


def format_time(time_obj) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç HH:MM (24—á).

    Args:
        time_obj: –û–±—ä–µ–∫—Ç datetime.time

    Returns:
        –í—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM

    Example:
        >>> from datetime import time
        >>> format_time(time(7, 30))
        "07:30"
    """
    return time_obj.strftime("%H:%M")


def calculate_percent(done: int, total: int) -> float:
    """
    –í—ã—á–∏—Å–ª—è–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.

    Args:
        done: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö
        total: –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ

    Returns:
        –ü—Ä–æ—Ü–µ–Ω—Ç (0-100)
    """
    if total == 0:
        return 0.0
    return (done / total) * 100
