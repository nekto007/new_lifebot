"""–°–µ—Ä–≤–∏—Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á–∞—Ö —Å —ç—Å–∫–∞–ª–∞—Ü–∏–µ–π."""

from datetime import datetime, timedelta

from config import logger
from db import DelegatedTask, SessionLocal, Task, User
from sqlalchemy import select


class DelegationReminderService:
    """–£–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏ –¥–ª—è –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á."""

    def __init__(self, bot):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–µ—Ä–≤–∏—Å —Å —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–º –±–æ—Ç–∞."""
        self.bot = bot

    async def check_and_send_reminders(self):
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –ø—Ä–∏–Ω—è—Ç—ã–µ –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.
        –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ä–∞–∑ –≤ –¥–µ–Ω—å —É—Ç—Ä–æ–º).
        """
        async with SessionLocal() as session:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—Ä–∏–Ω—è—Ç—ã–µ –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
            result = await session.execute(select(DelegatedTask).where(DelegatedTask.status == "accepted"))
            delegated_tasks = result.scalars().all()

            now = datetime.now()

            for dt in delegated_tasks:
                await self._process_reminder(dt, now, session)

    async def _process_reminder(self, delegated_task: DelegatedTask, now: datetime, session):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏."""
        time_until_deadline = delegated_task.deadline - now

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–∞ –ª–∏ –∑–∞–¥–∞—á–∞
        if time_until_deadline.total_seconds() < 0:
            await self._send_overdue_reminder(delegated_task, session)
            return

        # –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –¥–æ –¥–µ–¥–ª–∞–π–Ω–∞
        task_age = now - delegated_task.created_at
        total_duration = delegated_task.deadline - delegated_task.created_at
        progress = task_age.total_seconds() / total_duration.total_seconds()

        # –õ–æ–≥–∏–∫–∞ —ç—Å–∫–∞–ª–∞—Ü–∏–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
        days_left = time_until_deadline.days

        # 1. –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–∞ 50% –≤—Ä–µ–º–µ–Ω–∏ (—Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑)
        if progress >= 0.5 and delegated_task.reminder_count == 0:
            await self._send_halfway_reminder(delegated_task, days_left, session)

        # 2. –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ 1 –¥–µ–Ω—å –¥–æ –¥–µ–¥–ª–∞–π–Ω–∞
        elif days_left == 1 and delegated_task.reminder_count < 2:
            await self._send_one_day_reminder(delegated_task, session)

        # 3. –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ –¥–µ–Ω—å –¥–µ–¥–ª–∞–π–Ω–∞
        elif days_left == 0 and delegated_task.reminder_count < 3:
            await self._send_today_reminder(delegated_task, session)

    async def _send_halfway_reminder(self, delegated_task: DelegatedTask, days_left: int, session):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–∞ –ø–æ–ª–æ–≤–∏–Ω–µ –ø—É—Ç–∏ –¥–æ –¥–µ–¥–ª–∞–π–Ω–∞."""
        task = await session.get(Task, delegated_task.task_id)
        assigned_by_user = await self._get_user(delegated_task.assigned_by_user_id)
        assigned_to_user = await self._get_user(delegated_task.assigned_to_user_id)

        if not task or not assigned_by_user or not assigned_to_user:
            return

        message = (
            f"üìã –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∑–∞–¥–∞—á–µ –æ—Ç {assigned_by_user.first_name}:\n\n"
            f"¬´{task.title}¬ª\n\n"
            f"‚è∞ –û—Å—Ç–∞–ª–æ—Å—å {days_left} –¥–Ω–µ–π –¥–æ –¥–µ–¥–ª–∞–π–Ω–∞ "
            f"({delegated_task.deadline.strftime('%d.%m.%Y')})\n\n"
            f"–ù–µ –∑–∞–±—É–¥—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å!"
        )

        try:
            await self.bot.send_message(delegated_task.assigned_to_user_id, message)
            delegated_task.reminder_count += 1
            delegated_task.last_reminder_at = datetime.now()
            await session.commit()
            logger.info(f"Sent halfway reminder for delegated task {delegated_task.id}")
        except Exception as e:
            logger.error(f"Failed to send halfway reminder for task {delegated_task.id}: {e}")

    async def _send_one_day_reminder(self, delegated_task: DelegatedTask, session):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ 1 –¥–µ–Ω—å –¥–æ –¥–µ–¥–ª–∞–π–Ω–∞."""
        task = await session.get(Task, delegated_task.task_id)
        assigned_by_user = await self._get_user(delegated_task.assigned_by_user_id)
        assigned_to_user = await self._get_user(delegated_task.assigned_to_user_id)

        if not task or not assigned_by_user or not assigned_to_user:
            return

        message = (
            f"‚ùóÔ∏è –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∑–∞–¥–∞—á–µ –æ—Ç {assigned_by_user.first_name}:\n\n"
            f"¬´{task.title}¬ª\n\n"
            f"‚è∞ <b>–ó–∞–≤—Ç—Ä–∞ –¥–µ–¥–ª–∞–π–Ω!</b> ({delegated_task.deadline.strftime('%d.%m.%Y')})\n\n"
            f"–£—Å–ø–µ–π –≤—ã–ø–æ–ª–Ω–∏—Ç—å!"
        )

        try:
            await self.bot.send_message(delegated_task.assigned_to_user_id, message)
            delegated_task.reminder_count += 1
            delegated_task.last_reminder_at = datetime.now()
            await session.commit()
            logger.info(f"Sent 1-day reminder for delegated task {delegated_task.id}")
        except Exception as e:
            logger.error(f"Failed to send 1-day reminder for task {delegated_task.id}: {e}")

    async def _send_today_reminder(self, delegated_task: DelegatedTask, session):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ –¥–µ–Ω—å –¥–µ–¥–ª–∞–π–Ω–∞."""
        task = await session.get(Task, delegated_task.task_id)
        assigned_by_user = await self._get_user(delegated_task.assigned_by_user_id)
        assigned_to_user = await self._get_user(delegated_task.assigned_to_user_id)

        if not task or not assigned_by_user or not assigned_to_user:
            return

        message = (
            f"üî• –°–†–û–ß–ù–û! –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∑–∞–¥–∞—á–µ –æ—Ç {assigned_by_user.first_name}:\n\n"
            f"¬´{task.title}¬ª\n\n"
            f"‚è∞ <b>–°–µ–≥–æ–¥–Ω—è –¥–µ–¥–ª–∞–π–Ω!</b> ({delegated_task.deadline.strftime('%d.%m.%Y')})\n\n"
            f"–ù—É–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!"
        )

        try:
            await self.bot.send_message(delegated_task.assigned_to_user_id, message)
            delegated_task.reminder_count += 1
            delegated_task.last_reminder_at = datetime.now()
            await session.commit()
            logger.info(f"Sent today reminder for delegated task {delegated_task.id}")
        except Exception as e:
            logger.error(f"Failed to send today reminder for task {delegated_task.id}: {e}")

    async def _send_overdue_reminder(self, delegated_task: DelegatedTask, session):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω–æ–π –∑–∞–¥–∞—á–µ."""
        task = await session.get(Task, delegated_task.task_id)
        assigned_by_user = await self._get_user(delegated_task.assigned_by_user_id)
        assigned_to_user = await self._get_user(delegated_task.assigned_to_user_id)

        if not task or not assigned_by_user or not assigned_to_user:
            return

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ overdue (–µ—Å–ª–∏ –µ—â—ë –Ω–µ –æ–±–Ω–æ–≤–ª—ë–Ω)
        if delegated_task.status != "overdue":
            delegated_task.status = "overdue"
            await session.commit()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–æ–≥–¥–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
        if delegated_task.last_reminder_at:
            time_since_last = datetime.now() - delegated_task.last_reminder_at
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –º–∞–∫—Å–∏–º—É–º —Ä–∞–∑ –≤ –¥–µ–Ω—å
            if time_since_last < timedelta(days=1):
                return

        days_overdue = (datetime.now() - delegated_task.deadline).days

        # –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é
        message_to_assignee = (
            f"‚ö†Ô∏è –ü–†–û–°–†–û–ß–ï–ù–ê –∑–∞–¥–∞—á–∞ –æ—Ç {assigned_by_user.first_name}:\n\n"
            f"¬´{task.title}¬ª\n\n"
            f"‚è∞ –î–µ–¥–ª–∞–π–Ω –±—ã–ª: {delegated_task.deadline.strftime('%d.%m.%Y')}\n"
            f"‚è± –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ –Ω–∞ {days_overdue} –¥–Ω\n\n"
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–ø–æ–ª–Ω–∏ –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ!"
        )

        # –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∞–≤—Ç–æ—Ä—É –∑–∞–¥–∞—á–∏
        message_to_author = (
            f"‚ö†Ô∏è –ó–∞–¥–∞—á–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–∞:\n\n"
            f"¬´{task.title}¬ª\n\n"
            f"üë§ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: {assigned_to_user.first_name}\n"
            f"‚è∞ –î–µ–¥–ª–∞–π–Ω –±—ã–ª: {delegated_task.deadline.strftime('%d.%m.%Y')}\n"
            f"‚è± –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ –Ω–∞ {days_overdue} –¥–Ω"
        )

        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é
            await self.bot.send_message(delegated_task.assigned_to_user_id, message_to_assignee)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–≤—Ç–æ—Ä—É
            await self.bot.send_message(delegated_task.assigned_by_user_id, message_to_author)

            delegated_task.reminder_count += 1
            delegated_task.last_reminder_at = datetime.now()
            await session.commit()

            logger.info(
                f"Sent overdue reminder for delegated task {delegated_task.id} "
                f"(overdue by {days_overdue} days)"
            )
        except Exception as e:
            logger.error(f"Failed to send overdue reminder for task {delegated_task.id}: {e}")

    async def _get_user(self, user_id: int) -> User:
        """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î."""
        async with SessionLocal() as session:
            result = await session.execute(select(User).where(User.user_id == user_id))
            return result.scalar_one_or_none()
